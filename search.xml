<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Shiro-入门了解]]></title>
    <url>%2F2019%2F01%2F09%2FShiro-%E5%85%A5%E9%97%A8%E4%BA%86%E8%A7%A3%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[泰国旅游小记]]></title>
    <url>%2F2019%2F01%2F04%2F%E6%B3%B0%E5%9B%BD%E6%97%85%E6%B8%B8%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[“我们出去玩吧!”“去哪?”“泰国！” 半个月之前，一次短短的对话，定下了去泰国的行程。 出发之前由于之前的20多年时光中没有出国的经历，所以至今还没护照，故随即预约了下个工作日的护照办理。重庆的护照预约很方便，在微信公众号上预约时间和办理类型即可。 预约当天，到达了当地的出入境大厅。问了问工作人员流程，到了一个自助照相的地方。排队、照相、拿取凭证，简单高效的流程让人感到舒适。因为是工作日，所以当时办理事务的人不多，拿取预约号之后，很快就轮到我们办理护照了，填写了一些信息，录入了脸部和指纹信息，然后交180块费用，就办理完成了，凭借回执单，在下个星期的星期三（大约7-8个工作日）来领取就行。 总体而言，办理护照的流程和效率都是相当高的。 办理完护照之后，开始考虑自由行还是跟团。之前在国内旅游，都是自由行，但考虑到第一次出国，应对突发状况方面的经验欠缺，故考虑跟团。 在网上翻阅了很多旅行团的行程，大同小异，分为低价团、购物团和纯玩团，价格也是依次递增。由于我和我女朋友都是学生，而且也都不爱管家里要钱，所以选择了一个在重庆出发的购屋团，行程中由三个购物店。 由于我们是网上订的行程，也提前了大概有半个月订的，在和之后团员了解下来，同一个行程，我们订的是最贵的。 办了护照和定了行程，接着就是准备去旅游时需要的东西了。我们在网上租借了一个gopro，算下来8天只需要70多块钱，还是挺不错的。准备了衣服和药品，在银行换取了1w泰铢，准备出发了。 值得注意的是，之前在泰国大使馆查阅落地签需要的资料时，所需要携带的现金为每人1w泰铢（大致为2k人民币），而旅行社这边要求我们每人携带5k人民币，其目的是为了让我们能够多消费。 出发了出发当天，由于害怕被遣返，携带了接近8k人民币，到达机场之后，在领队约定的地方签到。遇到了跟我们同团的一对老年夫妇，他们大致70岁了，我女朋友小陈和他们攀谈时，了解到他们经常出去跟团旅游，也多次要求携带大量现金，但他们都没有携带。故小陈则放下心，去机场ATM将我们携带的现金存了进去，只携带了1W泰铢和2k人民币，符合泰国大使馆公布的要求。 在签到时，要求我们购买每人80元的交通险，由于我是第一次出来跟团，也觉得80块不多，故想买，但小陈觉得我们之前以及买过保险，所以在询问可以不买时，则没有买，之后询问老年夫妇，他们也没有买。 在机场处理好了相关信息之后，开始入关登记，重庆江北机场T3航站楼还是很先进的，大部分都是自助完成，过关很方便。 我们乘坐的是亚航的飞机，携带了20kg的托运和飞机餐，由于廉航，飞机座位对于我这个180cm身高的人来说有点打不直腿，三小时的飞行对我来说有点难受。 到达泰国，领队拿着我们的护照和填好的出入境卡去办理落地签，因为最近泰国免落地签费用，则人有点多，等待时间有点久。办好落地签之后，排队出关。途中没有人来检查现金，害的我们白担心一场。 曼谷 下了飞机。 脱下身上的大衣、羽绒服。 鼻子呼吸到了第一口空气，热、灰尘、干燥。 出了廊曼机场，接待我们的是导游和司机，带我们去了酒店。酒店还不错，干净、安静。周围有7-11和全家的便利店，能够买到一些吃的和生活用品。价格还算便宜。 我们的行程，大致可以简化成这样： 酒店-大巴-团队景点-大巴-酒店 而景点除了人有点多，还算不错。但是我更喜欢在大巴的时间。 在大巴车上看曼谷。 鲜艳的颜色，寺庙，皇家标志，日本车和皮卡车混成的巨大车流，高速路下的大量铁板搭建的贫民窟窟，在低楼中树立着设计独特的高楼。 这些非常符合我印象中的泰国。 这就是泰国。 芭提雅 情色表演，大量白人，海滩和太平洋，酒吧等，这些都是我对芭提雅这个地方的印象。 晚上的芭提雅才是芭提雅，夜空中的礼花和音乐声让这个城市变得躁动，随处可见的红灯区和酒吧，大量的酒精充满了街道。这些使小陈在街上走的时候，更加抱紧的我的手臂。 没有去酒吧，也没有洗泰浴，看了廉价的成人秀。 总结 第一次跟团，总的来说，花什么钱，旅什么游。 购物店无疑是最难受的行程，表面上是无需要强制购物，实则在第二天和第四天的行程中，导游的话术中，将购物绑架到了我们的身上，也很明显的感到，由于我们团队的购物水平不高，吃的东西也很差。 和小陈在海边的谈心很开心，虽然每天都有小吵架，但是我们都是喜欢着对方，每天都能和好。 活着，不是为了走遍全世界，也不是为了拥有什么东西，更不是需要成为什么样的人，活着就是活着。 去过一个景点，里面是泰国高僧的蜡像，每个蜡像旁，都会有高僧说的一句话，很遗憾的是当时没有记住那些话。但是唯一记住的，是他们的修行和思考，能够让他们成佛，让他们活着。 一次旅行，很高兴。小陈说她喜欢和我一起旅行，虽然旅行中会有吵架，但她还是喜欢和我一起旅行。 我也一样。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>泰国</tag>
        <tag>旅游</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vagrant+VirtualBox搭建Linux开发环境]]></title>
    <url>%2F2019%2F01%2F03%2FVagrant-Virtualbox%E6%90%AD%E5%BB%BALinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[前言现在我是用的开发环境是windows 10。然而在我之前工作中，常常会项目部署在Linux环境中，所以在开发的时候，也会经常用到Linux环境。这次我就在我本地win10环境利用Vagrant+VirtualBox搭建一个Centos7的环境。 为什么选用Vagrant在我之前想要使用到Linux环境时，通常会使用虚拟机，如VirtualBox或者VMware，手动安装Linux系统和里面所需要的工作环境。 而使用Vagrant则可以省略上面的一些步骤，方便我们开发人员使用。 Vagrant提供了易于配置，可重复和编写的工作环境，基于行业标准技术构建，由单一一致的工作流程控制，以帮助你和你的团队最大限度地提高生产力和灵活性。 就开发人员而言，Vagrant可以大大简化我们平时配置环境的时间。只需要利用一个Vagrant文件，团队就可以创建出一个相同配置的开发环境，无论时Linux、Mac OS还是Windows。 环境搭建VirtualBox在官网下载自己环境的安装包。 我下载的是windows 6.0.0版本 下载好之后，直接安装完成即可。 Vagrant在官网下载好自己相应环境的安装包。 我下载的是windows 64位 2.2.2版本 初始化项目下载安装完成之后，在本地创建一个目录（如dev），进入目录，然后初始化项目。 12$ cd dev$ vagrant init 安装BOX使用以下命令，则可以直接从官网下载box文件，并启动。 12$ vagrant init centos/7$ vagrant up --provider virtualbox 如果下载速度慢，则可以从官网下载box文件，从本地加载。 123$ vagrant box add centos7 D:/software/boxes/centos-7.0-x86_64.box$ vagrant init centos7$ vagrant up 其他Linux发行版操作类似。 ssh登录通过vagrant up命令，启动了刚才安装的Centos7，则可以直接通过ssh来登录虚拟机了。 1$ vagrant ssh 注意：windows中的cmd命令行不能支持ssh，需要使用其他SSH客户端 注意：使用客户端，如xShell登录时，账户密码为vagrant，一般端口为2222或者2200 常用命令123456789101112131415vagrant box add 添加box的操作vagrant init 初始化box的操作，会生成vagrant的配置文件Vagrantfilevagrant up 启动本地环境vagrant ssh 通过 ssh 登录本地环境所在虚拟机vagrant halt 关闭本地环境vagrant suspend 暂停本地环境vagrant resume 恢复本地环境vagrant reload 修改了 Vagrantfile 后，使之生效（相当于先 halt，再 up）vagrant destroy 彻底移除本地环境vagrant box list 显示当前已经添加的box列表vagrant box remove 删除相应的boxvagrant package 打包命令，可以把当前的运行的虚拟机环境进行打包vagrant plugin 用于安装卸载插件vagrant status 获取当前虚拟机的状态vagrant global-status 显示当前用户Vagrant的所有环境状态]]></content>
      <categories>
        <category>Vagrant</category>
      </categories>
      <tags>
        <tag>Vagrant</tag>
        <tag>VirtualBox</tag>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年终小结]]></title>
    <url>%2F2018%2F12%2F25%2F2018%E5%B9%B4%E7%BB%88%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[前言前几天把之前记的Maven笔记整理出来，之前也在学习Mybatis框架，可能会整理出文章来。 最近几天，在V2EX上看见有人讨论Linux发行版用哪个的问题，才发现我现在的开发环境没有Linux，随即开始着手搭建。用的是Vbox+Vagrant搭建的Centos7。之前在学校一直用的ubuntu，这次换了Centos，得好好习惯下。 流水账2018年底了，既然做了博客，就写篇年底总结来记录记录今年。下面开始流水账。 年初，作为大三下期的学生，课程当然很紧，每天课几乎都很多。但还是有空余时间，所以报了软考中级和六级考试。 到了期中，结了两门课，课程不是很多，但随即开始了3个课程设计和学校安排的实习，其中一个实习公司是Oracle。他们公司来宣讲的时候，准备了OCJP的免费考试名额作为奖励，通过考试获得，因为免费，所以没有犹豫的报名了，也顺利的拿到了名额。 5、6月份，完成了学习的课程设计，写好报告，完成了答辩。完成了软考中级，感觉良好。完成了OCJP考试，顺利通过。即将参加6级考试。参加了学校安排的生产实习，实习公司由学院安排，到的是培训机构进行实习。说是实习，其实更多像是培训，最终完成一个小组作品。这也是我第一次合作开发，学到了些东西。 期末，6级不出意外是挂了。由于感觉学校安排的实习不怎么样，我又想在秋招之前到公司实习下，故在网上投递简历。找了一家gis公司，在重庆主要和规划局做项目外包。在这家公司，实际接触到项目开发，由于不是互联网公司，作为Java开发的我，实际上做了环境搭建、部署，文档编写，测试，开发等多种工作。这也使我学到了很多东西，对项目开发的理解也具体化。 9月，在公司实习的我，想着开学之后就开始了秋招。所以一边完成工作的情况下，一边着手秋招的准备。投了一些公司，参加了百度、顺丰等的面试，但是由于一边实习，一边准备，没有准备太充分，所以效果都不太好，所以有了辞职的打算。 9月底，正式辞职，也就是9月底，收到猪八戒网的面试邀请，所以在家认真准备。面试非常愉快，面试官当场给我发了offer。由于猪八戒网在重庆还是很不错的公司，所以签约。 签约之后，是明年7月报道，可以提前实习。由于想在这段时间提升下自己和锻炼身体，所以没有去实习。在彻彻底底休息了一个月后，开始阅读和学习，之后搭建了博客。 总结这年，和女朋友在一起两年了，用实习工资把我的Xperia Z3换成了小米8，从水王、女流等主播那里收获了很多，喜欢上了阅读，找到了工作。 感觉自己在逐年提升，喜欢这个变化的过程，就像悉达多一样，经历，热爱。 2018年，很平常。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven依赖、聚合与继承]]></title>
    <url>%2F2018%2F12%2F24%2FMaven%E4%BE%9D%E8%B5%96%E3%80%81%E8%81%9A%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF%2F</url>
    <content type="text"><![CDATA[依赖机制依赖管理是Maven的核心机制。可以管理数百个模块组成的多模块项目和应用程序的依赖关系。 Maven通过定义良好的ClassPath和library version，在定义、创建和维护可重现的构建方面提供大量帮助。 依赖范围依赖范围用于限制依赖关系的传递性，还用与各种构建任务的classpath。 Maven定义了三个classpath：编译、测试、运行 scope标签控制依赖与classpath的关系 compile：默认范围，对于编译、测试和运行三种classpath都有效。这些依赖项将传播到依赖项目。 provided：与compile很相似，但表示你希望JDK或容器运行时提供依赖关系。例如servlet-api。对于编译、测试的classpath有效，但对于运行无效，并且不可传递 runtime：对于运行和测试的classpath有效，编译无效。例如jdbc驱动。 test：对于测试classpath有效，对于编译和运行阶段无效，不具有传递性。 system：与provided相似，只是必须提供明确包含它的JAR，通过systemPath标签指出路径。 import：只能作用于&lt;dependencyManagement&gt;部分中的pom类型的依赖项。它用来替换依赖列表里的依赖项，不参与限制依赖的传递性。 依赖传递如果A项目依赖B项目，B项目依赖C项目，则形成了依赖传递，这样A项目也依赖C项目。 如果A项目不想依赖C项目，则在&lt;exlusions&gt;加入&lt;exlusion&gt;标签，标记C的坐标即可。 1234567891011&lt;dependency&gt; &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.3.1&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;jline&lt;/groupId&gt; &lt;artifactId&gt;jline&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 依赖冲突在依赖中，依赖了同一个包的两个版本，则Maven根据短路优先原则参数依赖。 短路优先假设A项目中的依赖关系里，又两个X版本，依赖关系如下： 12A-&gt;B-&gt;C-&gt;X(jar)A-&gt;D-&gt;X(jar) 则会选择短的路径，即第二条。如果路径相同，则先生命优先。 聚合如果想一次构建多个项目模块，则可以对多个项目模块进行聚合。 如：12345&lt;modules&gt; &lt;module&gt;模块一&lt;/module&gt; &lt;module&gt;模块二&lt;/module&gt; &lt;module&gt;模块三&lt;/module&gt;&lt;/modules&gt; 继承为了消除重复，可以把配置信息提出。 如果需要继承某个项目，则在&lt;parent&gt;标签中添加父模块坐标（有必要时需要添加实际路径） 123456&lt;parent&gt; &lt;groupId&gt;公司名&lt;/groupId&gt; &lt;artifactId&gt;项目名&lt;/artifactId&gt; &lt;version&gt;版本&lt;/version&gt; &lt;relativePath&gt;实际路径&lt;/relativePath&gt;&lt;/parent&gt; 子模块继承了父模块的大量元素，但注意下面几项不会被继承 artifactId name prerequisites dependencyManagement由于子模块会继承父模块的全部依赖，为了方便子模块继承，父模块可以采用&lt;dependencyManagement&gt;进行管理，这样子模块就可以选择需要继承的依赖，不用全部继承依赖了。 123456789&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencyManagement&gt; 参考Maven依赖管理]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>依赖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven-pom常用元素]]></title>
    <url>%2F2018%2F12%2F21%2FMaven-pom%E5%B8%B8%E7%94%A8%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[前言这次主要是对pom文件的一个解析，pom.xml文件作为项目对象模型，通过xml来表示一个Maven项目，是Maven的核心。 常用元素下面就主要对pom的常用元素进行解析。 其中，有些依赖、模块、继承等将在接下来的文章中介绍。 随不是完全对pom文件进行解析，但也是我在平时开发中常用到的一些元素，对下面元素有了深入了解，能够对付日常开发中的大部分问题。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106&lt;!-- 标识xml文件版本号和编码方式 --&gt;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!-- pom文件的根元素，主要声明了命名空间和xsd元素 --&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;!-- 所使用的object model版本，为了确保稳定的使用，这个元素是强制性的 --&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- 坐标信息 --&gt; &lt;!-- 项目创建团体或组织的唯一标识符，通常为域名反写 --&gt; &lt;groupId&gt;&lt;/groupId&gt; &lt;!-- 项目的名字，通常为项目名+模块名 --&gt; &lt;artifactId&gt;&lt;/artifactId&gt; &lt;!-- 版本号 --&gt; &lt;!-- 第一个0表示大版本号 第二个0表示分支版本号 第三个0标识小版本号 0.0.1-SNAPSHOT snapshot快照 alpha内测 beta公测 Release稳定 GA正式发布 --&gt; &lt;version&gt;&lt;/version&gt; &lt;!-- 打包方式，默认为jar --&gt; &lt;packaging&gt;&lt;/packaging&gt; &lt;!-- END --&gt; &lt;!-- 用于Maven生成的文档中 --&gt; &lt;!-- 项目的展示名--&gt; &lt;name&gt;&lt;/name&gt; &lt;!-- 项目的地址 --&gt; &lt;url&gt;&lt;/url&gt; &lt;!-- 项目描述 --&gt; &lt;description&gt;&lt;/description&gt; &lt;!-- 开发人员列表 --&gt; &lt;developers&gt;&lt;/developers&gt; &lt;!-- 许可证信息 --&gt; &lt;license&gt;&lt;/license&gt; &lt;!-- 组织信息 --&gt; &lt;organization&gt;&lt;/organization&gt; &lt;!-- END --&gt; &lt;!-- 属性定义 --&gt; &lt;properties&gt; &lt;!-- 项目编码 --&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;!-- 编译JDK版本 --&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;!-- 自定义属性 --&gt; &lt;slf4j.version&gt;1.7.18&lt;/slf4j.version&gt; &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt; &lt;/properties&gt; &lt;!-- 依赖列表 --&gt; &lt;dependencies&gt; &lt;!-- 依赖项 --&gt; &lt;dependency&gt; &lt;!-- 项目坐标 --&gt; &lt;groupId&gt;&lt;/groupId&gt; &lt;artifactId&gt;&lt;/artifactId&gt; &lt;version&gt;&lt;/version&gt; &lt;!-- 依赖范围 --&gt; &lt;scope&gt;&lt;/scope&gt; &lt;!-- 设置依赖是否可选 --&gt; &lt;optional&gt;&lt;/optional&gt; &lt;!--排除依赖传递列表 --&gt; &lt;exclusions&gt; &lt;exclusion&gt;&lt;/exclusion&gt; &lt;/exclusions&gt; &lt;!-- END --&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!-- 构建行为配置 --&gt; &lt;build&gt; &lt;!-- 插件管理 --&gt; &lt;pluginManagement&gt; &lt;!-- 插件列表 --&gt; &lt;plugins&gt; &lt;!-- 插件 --&gt; &lt;plugin&gt; &lt;!-- 坐标 --&gt; &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;/build&gt; &lt;!-- 父模块继承 --&gt; &lt;parent&gt;&lt;/parent&gt; &lt;!-- 多模块聚合 --&gt; &lt;modules&gt; &lt;module&gt;&lt;/module&gt; &lt;/modules&gt;&lt;/project&gt;]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>Pom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven的生命周期]]></title>
    <url>%2F2018%2F12%2F20%2FMaven%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%2F</url>
    <content type="text"><![CDATA[Maven的功能之一是完成项目构建，而一个完整的项目构建过程包括：清理、编译、测试、打包、集成测试、验证、部署。所以Maven的生命周期中，概括了一个完整的项目构建过程。 Maven生命周期构建生命周期的几个阶段Maven中有三个内置的构建生命周期，clean、default、site。 clean 清理项目 pre-clean 执行清理前的工作 clean 清理上次构建生成的所有工作 post-clean 执行清理后的工作 default 构建项目（核心） 常用的有compile、test、package、install site 生成项目站点 pre-site 在生成项目站点之前要完成的工作 site 生成项目的站点文档 post-site 在生成项目站点后要完成的工作 site-deploy 发布生成站点到服务器上 生命周期的顺序是依次执行的，执行后面的步骤，会先去执行之前的步骤。 完整的生命周期列表，请参考Maven生命周期参考 某些阶段通常不会在命令行调用以连字符（pre-，post-，process-*）命名的阶段通常不会在命令行直接调用。这些阶段对构建进行排序，产生在构建之外无用的中间结果。比如在执行integration-test时，环境可能处于挂机状态。 设置项目在项目构建Maven构建时，如何给每个构建阶段分配任务？ 打包常用的方法时在POM元素packaging为项目设置打包。如jar，war，ear和pom，如果未设置，则默认为jar。 每个打包方式都包含一个绑定到特定阶段的目标列表。比如，jar打包的默认构建生命周期的阶段的绑定列表如下。 Phase plugin:goal process-resources resources:resources compile compiler:compile process-test-resources resources:testResources test-compile compiler:testCompile test surefire:test package jar:jar install install:install deploy deploy:deploy 参考标准绑定集 插件可以通过添加插件的方式向项目中添加目标。插件也就是Maven提供目标的工具，每个插件的功能不同，具体可从官网查看。 比如，如果想生成Java源码，则可以使用Modello插件，将modello:java绑定到generate-sources阶段。则可以在POM文件中&lt;build&gt;的&lt;plugins&gt;部分插入以下内容： 1234567891011121314151617181920... &lt;plugin&gt; &lt;groupId&gt;org.codehaus.modello&lt;/groupId&gt; &lt;artifactId&gt;modello-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.8.1&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;configuration&gt; &lt;models&gt; &lt;model&gt;src/main/mdo/maven.mdo&lt;/model&gt; &lt;/models&gt; &lt;version&gt;4.0.0&lt;/version&gt; &lt;/configuration&gt; &lt;goals&gt; &lt;goal&gt;java&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt;...]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>生命周期</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven中的坐标、仓库]]></title>
    <url>%2F2018%2F12%2F18%2FMaven%E4%B8%AD%E7%9A%84%E5%9D%90%E6%A0%87%E3%80%81%E4%BB%93%E5%BA%93%2F</url>
    <content type="text"><![CDATA[坐标在Maven中，任何一个插件、项目输出都可以被称之为构建，所有构建都通过坐标作为其唯一标识。 大致由下面五个元素构成： groupId：一般为公司或组织的逆向域名。 artifactId：一般为项目名称+模块名称。 version：当前该Maven项目的版本。 packaging：Maven项目的打包方式，默认是jar，也可以打包成war, ear等。 classifier：定义一些附件，更加细化的后缀，用来定义比如源码、文档、x86版本、ios版本等。 前三个是必须定义，后两个视情况而定。 总之，每一个元素坐标，都是为了准确的找到一个构建而设定的。 仓库Maven中的仓库，用来存放构建，分为本地仓库和远程仓库 如果在所依赖的构建在本地仓库中没有查找到，则会去远程仓库(默认为maven远程中央仓库)中下载。 修改本地仓库在安装目录下的conf文件夹中，打开settings.xml文件。找到localRepository，在3.6.0版本中，会有下面一段注解，意思就是本地仓库默认在${user.home}/.m2/repository下，如果需要修改，则添加&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;这个标签，里面的值为你设置的本地仓库路径。 1234567&lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; --&gt; &lt;localRepository&gt;你的本地仓库路径&lt;/localRepository&gt; 镜像仓库由于maven的中央仓库设置在国外，访问和下载速度很慢，则可以设置一个国内的镜像仓库，这样就能直接从国内的镜像仓库中下载所需要的构建了。 在安装目录下的conf文件夹中，打开settings.xml文件。找到mirrors，添加相应内容即可。 镜像仓库就相当于个拦截器，它会拦截maven对远程仓库的请求，将请求的地址重定向到&lt;url&gt;标签所配置的地址，所拦截的范围为&lt;mirrorOf&gt;标签所配置的内容，拦截范围内容为仓库ID，可设置多个，用 , 隔开，也可以用 ! 设置不用拦截仓库id。 123456789101112131415161718192021&lt;mirrors&gt; &lt;!-- mirror | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | &lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt; &lt;/mirror&gt; --&gt; &lt;!-- 阿里云镜像 --&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt;]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>仓库</tag>
        <tag>镜像</tag>
        <tag>坐标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven入门]]></title>
    <url>%2F2018%2F12%2F16%2FMaven%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[MavenMaven是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。 环境搭建本次将在windows环境下搭建maven环境。 注意：环境中需要配置JDK 下载Maven访问Maven官网,下载你所需要的版本，一般情况下，下载已编译的版本，然后解压到相应的安装目录下。 目录结构介绍： bin：包含mvn的运行脚本 boot：一个类加载器的框架 conf：配置文件目录 lib：mvn平时所用的类库 配置环境变量下载解压安装好之后，需要进行环境变量的配置，以便在任何路径下都能执行mvn的相应运行脚本。 打开环境变量，编辑系统变量（如果此电脑由多用户使用，则编辑用户变量） 新建，变量名M2_HOME，变量值为maven的安装目录，确定。 编辑Path，增加%M2_HOME%\bin;，确定。 配置成功，打开命令行，输入mvn -v可以查看到maven的版本，Java信息和系统信息。 打开环境变量步骤：电脑邮件-属性-高级系统设置-环境变量。安装目录下最好不要有中文路径，以避免不必要的问题。 Maven目录结构良好的目录结构，有助于开发人员理解项目，也能更好的维护项目。 一般的Maven项目目录结构 12345678910|--pom.xml //项目对象模型配置文件|--src |--main |--java //源代码 `package |--resources //资源文件 |--test |--java //测试代码 `package |--resources //测试资源文件 Maven常用命令123456mvn -v //查看maven版本mvm compile //编译mvn test //测试mvn package //打包mvn clean //删除targetmvn install //安装jar包到本地仓库 创建目录的两种方式 arhetype:gennerate //按照提示进行选择 arhetype:gennerate -DgroupId=组织名，公司网址反写 -DartifactId=项目名-模块名 -Dversion=版本号 -Dversion=版本号 -Dpackage=代码存在的包名]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo主题NexT配置]]></title>
    <url>%2F2018%2F12%2F10%2FHexo%E4%B8%BB%E9%A2%98NexT%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[上篇博客配置了Hexo，今天这篇文章，将介绍Hexo配置NexT主题的配置。 NexT主题下载与启动使用git，克隆最新版本，下载到/themes目录下。 12$ cd username.github.io$ git clone https://github.com/iissnan/hexo-theme-next themes/next 下载好之后，打开站点配置文件(/_config.yml),找到theme字段，将值改为next。 1theme: next 重新启动hexo站点，即可看到主题改变。 注：配置其他主题也是一样的步骤 注：如果没有看到主题改变，清理下缓存，使用hexo clean命令，再重试 配置站点配置文件站点配置文件在根目录下的_congif.yml 站点信息设置12345title: #站点名称subtitle: #副标题description: #站点描述author: #昵称language: #语言设置 注意：NexT主题中，language配置有相应的配置信息。 语言 代码 设定示例 English en language: en 简体中文 zh-Hans language: zh-Hans Français fr-FR language: fr-FR Português pt language: pt or language: pt-BR 繁體中文 zh-hk 或者 zh-tw language: zh-hk Русский язык ru language: ru Deutsch de language: de 日本語 ja language: ja Indonesian id language: id Korean ko language: ko 配置主题配置文件主题配置文件在主题目录下的/themes/next/_congif.yml 选择SchemeScheme是NexT提供的一种特性，借助于Scheme，NexT为你提供多种不同的外观。 取消想要使用的效果前面的#注释，即可开启，，123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes# scheme: Muse# scheme: Mist# scheme: Piscesscheme: Gemini 设置菜单通过配置menu标签，来设置网址的菜单选项。 用法：key: link || icon key为菜单项名称，如果在配置的language中翻译项能找到对应翻译，则使用翻译，如果不能找到，则使用key。 link为菜单的链接。 icon为FontAwesome图标的名称，如果不配置，则默认使用问题图标。 menu_icons配置是否使用icon。1234567891011121314151617# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true 注：如果站点在子目录下运行，则link的最前面的/删除。 注：默认菜单项为上面列出的，只有home和archives不需要手动创建，其他均需要手动创建。 设置头像修改avatar字段，值为头像链接，链接可以为：12# Sidebar Avatar http://example.com/avatar.png 地址 值 完整的互联网 URI http://example.com/avatar.png 站点内的地址 将头像放置主题目录下的 source/uploads/ （新建 uploads 目录若不存在） 配置为：avatar: /uploads/avatar.png 或者 放置在 source/images/ 目录下 配置为：avatar: /images/avatar.png 站点建立时间这个时间将在站点的底部显示，例如 ©2018。 编辑主题配置文件，新增字段since。 1since: 2018 Valine评论配置leancloudValine需要运行在leancloud上，所以需要注册其账号，创建一个应用（名字随意），进入应用，设置，应用Key，找到App ID和App Key。 配置NexT主题配置文件打开主题配置文件（/themes/_config.yml），找到Valine标签（没有可自行添加），配置如下。12345678910valine: enable: true appid: #上面的appid appkey: #上面的appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: 欢迎评论 # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail # custom comment header pageSize: 10 # pagination size 阅读次数统计（LeanCloud)配置leancloud在配置Valine评论系统的时候，已经拥有了leancloud账号，如果没有，则可以跳转上去查看。 创建应用(名字随意）点击左侧右上角的齿轮图标，新建Class：此处的新建Class名字必须为Counter。 由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择无限制。 与valine上述一样，获取该应用的App ID和App Key。 配置NexT主题配置文件打开主题配置文件（/themes/next/_config.yml），找到leancloud_visitors标签（没有可自行添加），配置如下。1234leancloud_visitors: enable: true app_id: #上面的appid app_key: #上面的appkey Local Search安装插件安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：1$ npm install hexo-generator-searchdb --save 配置站点信息在/config.yml中添加12345search: path: search.xml field: post format: html limit: 10000 配置主题信息在/themes/next/config.yml中,启动本地搜索123# Local searchlocal_search: enable: true 参考NexT官方文档]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github博客搭建]]></title>
    <url>%2F2018%2F12%2F05%2FHexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[hexo是快速、简洁且高效的博客框架，本文章介绍如何利用hexo+github搭建出一个静态博客网站。 环境搭建node.js在官网下载你相应环境的node.js，根据提示进行安装。 检验安装完成： $ node -v git在官网下载相应环境的git，根据提示安装。 安装成功后，配置相应的账号和邮箱。（这里需要github账号） 12$ git config --global user.name &quot;username&quot;$ git config --global user.email username@gmail.com hexo安装node.js之后，根据官网的提示，安装hexo。 1$ npm install hexo-cli -g 搭建本地博客创建博客目录上面三个环境搭建好之后，在本地的终端中，进入某个路径，在该路径下建立博客目录。123$ hexo init username.github.io$ cd username.github.io$ npm install 生成静态页面并运行123$ hexo clean$ hexo g$ hexo s g 即generates 即server 在浏览器中，输入地址 localhost:4000 即可看到效果。 这样一个本地的hexo博客系统以及搭建好了。 部署到Github创建一个username.github.io的public仓库创建一个仓库，根据你的github的username来创建一个public的仓库，仓库名为username.github.io 安装 hexo-deployer-git1$ npm install hexo-deployer-git --save 配置git在本地站点配置文件的：_config.yml 文件中配置deploy1234deploy: type: git repo: &lt;repository url&gt; branch: master 发布1$ hexo d 这样就能在username.github.com中看到你的博客系统了。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[起于年末的片头]]></title>
    <url>%2F2018%2F12%2F04%2F%E8%B5%B7%E4%BA%8E%E5%B9%B4%E6%9C%AB%E7%9A%84%E7%89%87%E5%A4%B4%2F</url>
    <content type="text"><![CDATA[今日，2018年12月4日，是2018年的结束，是我的开始。 回顾我，今年23岁，现目前就读于重庆理工大学，计算机科学与技术专业，大四上半学期。在今年暑假加入某gis公司实习，秋招的时候，顺利收到猪八戒网的Java开发offer。 在过去的很多年内，有很多想法，做过动漫视频剪辑，做过博客，跑步，摄影，看书。但几乎都是做了头两次，但没有坚持，原因就是，当把这些所谓的兴趣和想法，以质量的形式来衡量，就失去了做下去的动力。也就是说，当我想把某件事做好，那么需要很多精力和时间去做这件事，这件事就不再使我快乐，成为了我的负担，也就作罢。 当现目前我有了足够多的时间，距离明年工作报道还有半年多的时间，这使我重拾了以前的兴趣之一，博客。 现状现目前的我，是一名计算机专业的学生，和其他程序员一样，热爱着技术和科技。 目前是一名Java开发者，手头也有一些Java相关的技术书籍，掌握了Java基础，Web开发和Spring等相关框架的使用，在实习的时候也学习了Mongodb、Elasticsearch等的使用，在学校也学习了前端，C语言，算法，Andorid，计算机系统，单片机，计算机网络等课程，取得了软件设计师（软考中级），OCJP认证。 规划时间，是我现在所富裕的。所以我得好好计划下接下来的时间安排。 在接下来的时间，我有几个计划 坚持学习技术，记笔记，更新博客 每周跑步两次，锻炼身体，保护头发 坚持看书（非技术类），增长知识，方便吹b 在明年年后，租到适合的房子 不过，现目前还在大学，还有最后的毕业设计要做，等待开题中，等完成了就彻底轻松了，可以出去旅游旅游。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
