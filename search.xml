<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Maven中的坐标、仓库]]></title>
    <url>%2F2018%2F12%2F18%2FMaven%E4%B8%AD%E7%9A%84%E5%9D%90%E6%A0%87%E3%80%81%E4%BB%93%E5%BA%93%2F</url>
    <content type="text"><![CDATA[坐标在Maven中，任何一个插件、项目输出都可以被称之为构建，所有构建都通过坐标作为其唯一标识。 大致由下面五个元素构成： groupId：一般为公司或组织的逆向域名。 artifactId：一般为项目名称+模块名称。 version：当前该Maven项目的版本。 packaging：Maven项目的打包方式，默认是jar，也可以打包成war, ear等。 classifier：定义一些附件，更加细化的后缀，用来定义比如源码、文档、x86版本、ios版本等。 前三个是必须定义，后两个视情况而定。 总之，每一个元素坐标，都是为了准确的找到一个构建而设定的。 仓库Maven中的仓库，用来存放构建，分为本地仓库和远程仓库 如果在所依赖的构建在本地仓库中没有查找到，则会去远程仓库(默认为maven远程中央仓库)中下载。 修改本地仓库在安装目录下的conf文件夹中，打开settings.xml文件。找到localRepository，在3.6.0版本中，会有下面一段注解，意思就是本地仓库默认在${user.home}/.m2/repository下，如果需要修改，则添加&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;这个标签，里面的值为你设置的本地仓库路径。 1234567&lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; --&gt; &lt;localRepository&gt;你的本地仓库路径&lt;/localRepository&gt; 镜像仓库由于maven的中央仓库设置在国外，访问和下载速度很慢，则可以设置一个国内的镜像仓库，这样就能直接从国内的镜像仓库中下载所需要的构建了。 在安装目录下的conf文件夹中，打开settings.xml文件。找到mirrors，添加相应内容即可。 镜像仓库就相当于个拦截器，它会拦截maven对远程仓库的请求，将请求的地址重定向到&lt;url&gt;标签所配置的地址，所拦截的范围为&lt;mirrorOf&gt;标签所配置的内容，拦截范围内容为仓库ID，可设置多个，用 , 隔开，也可以用 ! 设置不用拦截仓库id。 123456789101112131415161718192021&lt;mirrors&gt; &lt;!-- mirror | Specifies a repository mirror site to use instead of a given repository. The repository that | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used | for inheritance and direct lookup purposes, and must be unique across the set of mirrors. | &lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt; &lt;/mirror&gt; --&gt; &lt;!-- 阿里云镜像 --&gt; &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt;]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
        <tag>仓库</tag>
        <tag>镜像</tag>
        <tag>坐标</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Maven入门]]></title>
    <url>%2F2018%2F12%2F16%2FMaven%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[MavenMaven是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。 环境搭建本次将在windows环境下搭建maven环境。 注意：环境中需要配置JDK 下载Maven访问Maven官网,下载你所需要的版本，一般情况下，下载已编译的版本，然后解压到相应的安装目录下。 目录结构介绍： bin：包含mvn的运行脚本 boot：一个类加载器的框架 conf：配置文件目录 lib：mvn平时所用的类库 配置环境变量下载解压安装好之后，需要进行环境变量的配置，以便在任何路径下都能执行mvn的相应运行脚本。 打开环境变量，编辑系统变量（如果此电脑由多用户使用，则编辑用户变量） 新建，变量名M2_HOME，变量值为maven的安装目录，确定。 编辑Path，增加%M2_HOME%\bin;，确定。 配置成功，打开命令行，输入mvn -v可以查看到maven的版本，Java信息和系统信息。 打开环境变量步骤：电脑邮件-属性-高级系统设置-环境变量。安装目录下最好不要有中文路径，以避免不必要的问题。 Maven目录结构良好的目录结构，有助于开发人员理解项目，也能更好的维护项目。 一般的Maven项目目录结构 12345678910|--pom.xml //项目对象模型配置文件|--src |--main |--java //源代码 `package |--resources //资源文件 |--test |--java //测试代码 `package |--resources //测试资源文件 Maven常用命令123456mvn -v //查看maven版本mvm compile //编译mvn test //测试mvn package //打包mvn clean //删除targetmvn install //安装jar包到本地仓库 创建目录的两种方式 arhetype:gennerate //按照提示进行选择 arhetype:gennerate -DgroupId=组织名，公司网址反写 -DartifactId=项目名-模块名 -Dversion=版本号 -Dversion=版本号 -Dpackage=代码存在的包名]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo主题NexT配置]]></title>
    <url>%2F2018%2F12%2F10%2FHexo%E4%B8%BB%E9%A2%98NexT%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[上篇博客配置了Hexo，今天这篇文章，将介绍Hexo配置NexT主题的配置。 NexT主题下载与启动使用git，克隆最新版本，下载到/themes目录下。 12$ cd username.github.io$ git clone https://github.com/iissnan/hexo-theme-next themes/next 下载好之后，打开站点配置文件(/_config.yml),找到theme字段，将值改为next。 1theme: next 重新启动hexo站点，即可看到主题改变。 注：配置其他主题也是一样的步骤 注：如果没有看到主题改变，清理下缓存，使用hexo clean命令，再重试 配置站点配置文件站点配置文件在根目录下的_congif.yml 站点信息设置12345title: #站点名称subtitle: #副标题description: #站点描述author: #昵称language: #语言设置 注意：NexT主题中，language配置有相应的配置信息。 语言 代码 设定示例 English en language: en 简体中文 zh-Hans language: zh-Hans Français fr-FR language: fr-FR Português pt language: pt or language: pt-BR 繁體中文 zh-hk 或者 zh-tw language: zh-hk Русский язык ru language: ru Deutsch de language: de 日本語 ja language: ja Indonesian id language: id Korean ko language: ko 配置主题配置文件主题配置文件在主题目录下的/themes/next/_congif.yml 选择SchemeScheme是NexT提供的一种特性，借助于Scheme，NexT为你提供多种不同的外观。 取消想要使用的效果前面的#注释，即可开启，，123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemes# scheme: Muse# scheme: Mist# scheme: Piscesscheme: Gemini 设置菜单通过配置menu标签，来设置网址的菜单选项。 用法：key: link || icon key为菜单项名称，如果在配置的language中翻译项能找到对应翻译，则使用翻译，如果不能找到，则使用key。 link为菜单的链接。 icon为FontAwesome图标的名称，如果不配置，则默认使用问题图标。 menu_icons配置是否使用icon。1234567891011121314151617# ---------------------------------------------------------------# Menu Settings# ---------------------------------------------------------------menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat# Enable/Disable menu icons.menu_icons: enable: true 注：如果站点在子目录下运行，则link的最前面的/删除。 注：默认菜单项为上面列出的，只有home和archives不需要手动创建，其他均需要手动创建。 设置头像修改avatar字段，值为头像链接，链接可以为：12# Sidebar Avatar http://example.com/avatar.png 地址 值 完整的互联网 URI http://example.com/avatar.png 站点内的地址 将头像放置主题目录下的 source/uploads/ （新建 uploads 目录若不存在） 配置为：avatar: /uploads/avatar.png 或者 放置在 source/images/ 目录下 配置为：avatar: /images/avatar.png 站点建立时间这个时间将在站点的底部显示，例如 ©2018。 编辑主题配置文件，新增字段since。 1since: 2018 Valine评论配置leancloudValine需要运行在leancloud上，所以需要注册其账号，创建一个应用（名字随意），进入应用，设置，应用Key，找到App ID和App Key。 配置NexT主题配置文件打开主题配置文件（/themes/_config.yml），找到Valine标签（没有可自行添加），配置如下。12345678910valine: enable: true appid: #上面的appid appkey: #上面的appkey notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: 欢迎评论 # comment box placeholder avatar: mm # gravatar style guest_info: nick,mail # custom comment header pageSize: 10 # pagination size 阅读次数统计（LeanCloud)配置leancloud在配置Valine评论系统的时候，已经拥有了leancloud账号，如果没有，则可以跳转上去查看。 创建应用(名字随意）点击左侧右上角的齿轮图标，新建Class：此处的新建Class名字必须为Counter。 由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择无限制。 与valine上述一样，获取该应用的App ID和App Key。 配置NexT主题配置文件打开主题配置文件（/themes/next/_config.yml），找到leancloud_visitors标签（没有可自行添加），配置如下。1234leancloud_visitors: enable: true app_id: #上面的appid app_key: #上面的appkey Local Search安装插件安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：1$ npm install hexo-generator-searchdb --save 配置站点信息在/config.yml中添加12345search: path: search.xml field: post format: html limit: 10000 配置主题信息在/themes/next/config.yml中,启动本地搜索123# Local searchlocal_search: enable: true 参考NexT官方文档]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Github博客搭建]]></title>
    <url>%2F2018%2F12%2F05%2FHexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[hexo是快速、简洁且高效的博客框架，本文章介绍如何利用hexo+github搭建出一个静态博客网站。 环境搭建node.js在官网下载你相应环境的node.js，根据提示进行安装。 检验安装完成： $ node -v git在官网下载相应环境的git，根据提示安装。 安装成功后，配置相应的账号和邮箱。（这里需要github账号） 12$ git config --global user.name &quot;username&quot;$ git config --global user.email username@gmail.com hexo安装node.js之后，根据官网的提示，安装hexo。 1$ npm install hexo-cli -g 搭建本地博客创建博客目录上面三个环境搭建好之后，在本地的终端中，进入某个路径，在该路径下建立博客目录。123$ hexo init username.github.io$ cd username.github.io$ npm install 生成静态页面并运行123$ hexo clean$ hexo g$ hexo s g 即generates 即server 在浏览器中，输入地址 localhost:4000 即可看到效果。 这样一个本地的hexo博客系统以及搭建好了。 部署到Github创建一个username.github.io的public仓库创建一个仓库，根据你的github的username来创建一个public的仓库，仓库名为username.github.io 安装 hexo-deployer-git1$ npm install hexo-deployer-git --save 配置git在本地站点配置文件的：_config.yml 文件中配置deploy1234deploy: type: git repo: &lt;repository url&gt; branch: master 发布1$ hexo d 这样就能在username.github.com中看到你的博客系统了。]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[起于年末的片头]]></title>
    <url>%2F2018%2F12%2F04%2F%E8%B5%B7%E4%BA%8E%E5%B9%B4%E6%9C%AB%E7%9A%84%E7%89%87%E5%A4%B4%2F</url>
    <content type="text"><![CDATA[今日，2018年12月4日，是2018年的结束，是我的开始。 回顾我，今年23岁，现目前就读于重庆理工大学，计算机科学与技术专业，大四上半学期。在今年暑假加入某gis公司实习，秋招的时候，顺利收到猪八戒网的Java开发offer。 在过去的很多年内，有很多想法，做过动漫视频剪辑，做过博客，跑步，摄影，看书。但几乎都是做了头两次，但没有坚持，原因就是，当把这些所谓的兴趣和想法，以质量的形式来衡量，就失去了做下去的动力。也就是说，当我想把某件事做好，那么需要很多精力和时间去做这件事，这件事就不再使我快乐，成为了我的负担，也就作罢。 当现目前我有了足够多的时间，距离明年工作报道还有半年多的时间，这使我重拾了以前的兴趣之一，博客。 现状现目前的我，是一名计算机专业的学生，和其他程序员一样，热爱着技术和科技。 目前是一名Java开发者，手头也有一些Java相关的技术书籍，掌握了Java基础，Web开发和Spring等相关框架的使用，在实习的时候也学习了Mongodb、Elasticsearch等的使用，在学校也学习了前端，C语言，算法，Andorid，计算机系统，单片机，计算机网络等课程，取得了软件设计师（软考中级），OCJP认证。 规划时间，是我现在所富裕的。所以我得好好计划下接下来的时间安排。 在接下来的时间，我有几个计划 坚持学习技术，记笔记，更新博客 每周跑步两次，锻炼身体，保护头发 坚持看书（非技术类），增长知识，方便吹b 在明年年后，租到适合的房子 不过，现目前还在大学，还有最后的毕业设计要做，等待开题中，等完成了就彻底轻松了，可以出去旅游旅游。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
