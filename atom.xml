<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郭鑫的个人博客</title>
  
  <subtitle>热爱技术 | 热爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bigbilii.github.io/"/>
  <updated>2019-01-16T09:25:40.804Z</updated>
  <id>https://bigbilii.github.io/</id>
  
  <author>
    <name>Guo Xin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Shiro-ssm项目集成与实现</title>
    <link href="https://bigbilii.github.io/2019/01/16/Shiro-ssm%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://bigbilii.github.io/2019/01/16/Shiro-ssm项目集成与实现/</id>
    <published>2019-01-16T04:07:03.000Z</published>
    <updated>2019-01-16T09:25:40.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习技术，最重要的是实践。</p><p>本着上面的原则，学习玩shiro基本知识之后，我也动手写了一个小demo，来熟悉下shiro。</p><p>在这个小项目中，需求是实现<code>普通用户</code>和<code>管理员</code>的权限分离，管理员可以对普通用户进行<code>CRUD</code>，普通用户只能登录。</p><p>这个项目中，涉及到以下技术点:</p><ul><li>SSM（Spring\SpringMVC\Mybatis）</li><li>Shiro的授权和角色认证</li><li>Shiro自定义Realm</li><li>Shiro加密</li><li>RBAC数据库设计</li><li>RESTFul api设计</li></ul><h2 id="RBAC数据库设计"><a href="#RBAC数据库设计" class="headerlink" title="RBAC数据库设计"></a>RBAC数据库设计</h2><p>来自wiki的解释：</p><blockquote><p>以角色为基础的访问控制（英语：Role-based access control，RBAC），是资讯安全领域中，一种较新且广为使用的访问控制机制，其不同于强制访问控制以及自由选定访问控制直接赋予使用者权限，而是将权限赋予角色.</p></blockquote><p>之所以采用RBAC设计模式来进行权限管理的数据库设计，是因为我们可以避免让<code>主体</code>直接与<code>权限</code>关联，而通过<code>角色</code>来进行连接，它通过<code>主体-角色-权限</code>这三张表，来实现主体与角色，角色与权限的关系。</p><p>所以我创建了以下五张表：</p><ul><li>user：用户表</li><li>role：角色表</li><li>promission：权限表</li><li>user_role：用户角色关系表</li><li>role_promission：角色权限关系表</li></ul><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">create table user</span><br><span class="line">(</span><br><span class="line">  id       int auto_increment</span><br><span class="line">    primary key,</span><br><span class="line">  username varchar(100) null comment &apos;用户名&apos;,</span><br><span class="line">  password varchar(100) null comment &apos;密码&apos;,</span><br><span class="line">  salt     varchar(100) null,</span><br><span class="line">  constraint user_username_uindex</span><br><span class="line">    unique (username)</span><br><span class="line">)</span><br><span class="line">  comment &apos;用户表&apos;;</span><br><span class="line"></span><br><span class="line">create table role</span><br><span class="line">(</span><br><span class="line">  id          int auto_increment</span><br><span class="line">    primary key,</span><br><span class="line">  name        varchar(20) null comment &apos;权限名称&apos;,</span><br><span class="line">  description varchar(50) null comment &apos;权限描述&apos;</span><br><span class="line">)</span><br><span class="line">  comment &apos;角色表&apos;;</span><br><span class="line"></span><br><span class="line">create table permission</span><br><span class="line">(</span><br><span class="line">  id          int auto_increment</span><br><span class="line">    primary key,</span><br><span class="line">  name        varchar(20) null comment &apos;权限名称&apos;,</span><br><span class="line">  description varchar(50) null comment &apos;权限描述表&apos;</span><br><span class="line">)</span><br><span class="line">  comment &apos;权限表&apos;;</span><br><span class="line"></span><br><span class="line">create table user_role</span><br><span class="line">(</span><br><span class="line">  user_id int null,</span><br><span class="line">  role_id int null,</span><br><span class="line">  constraint user_role_rid_fk</span><br><span class="line">    foreign key (role_id) references role (id),</span><br><span class="line">  constraint user_role_uid_fk</span><br><span class="line">    foreign key (user_id) references user (id)</span><br><span class="line">)</span><br><span class="line">  comment &apos;用户角色表&apos;;</span><br><span class="line"></span><br><span class="line">create table role_premission</span><br><span class="line">(</span><br><span class="line">  role_id       int null,</span><br><span class="line">  permission_id int null,</span><br><span class="line">  constraint role_premission_pid_fk</span><br><span class="line">    foreign key (permission_id) references permission (id),</span><br><span class="line">  constraint role_premission_uid_fk</span><br><span class="line">    foreign key (role_id) references role (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="Shiro遇到Spring"><a href="#Shiro遇到Spring" class="headerlink" title="Shiro遇到Spring"></a>Shiro遇到Spring</h2><p>在SSM架构中，通过XMl文件的方式来设置相关配置信息。由于是学习Shiro，所以其他的Spring相关的配置就不具体展示。</p><h3 id="Web-xml"><a href="#Web-xml" class="headerlink" title="Web.xml"></a>Web.xml</h3><p>在<code>web.xml</code>中配置shiro拦截器，以拦截所有的请求，通过shiro来进行权限管理。<br>注意：下面我添加了加载spring配置文件的配置信息，注意配置文件的命名格式需要为<code>spring-*.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- shiro 安全过滤器 --&gt;</span><br><span class="line">    &lt;filter&gt;</span><br><span class="line">        &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;</span><br><span class="line">        &lt;async-supported&gt;true&lt;/async-supported&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">    &lt;filter-mapping&gt;</span><br><span class="line">        &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/filter-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--加载spring配置文件--&gt;</span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">        &lt;param-value&gt;classpath:spring/spring-*.xml&lt;/param-value&gt;</span><br><span class="line">    &lt;/context-param&gt;</span><br><span class="line">    &lt;listener&gt;</span><br><span class="line">        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;</span><br><span class="line">    &lt;/listener&gt;</span><br></pre></td></tr></table></figure></p><h3 id="spring-shiro-xml"><a href="#spring-shiro-xml" class="headerlink" title="spring-shiro.xml"></a>spring-shiro.xml</h3><p>在spring-shiro.xml中，配置了shiro所有在spring中需要配置的相关信息，下面来具体看一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--Web拦截器--&gt;</span><br><span class="line">    &lt;bean id=&quot;shiroFilter&quot; class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;</span><br><span class="line">        &lt;!--安全认证管理器--&gt;</span><br><span class="line">        &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;/&gt;</span><br><span class="line">        &lt;!--登录页面--&gt;</span><br><span class="line">        &lt;property name=&quot;loginUrl&quot; value=&quot;/login.jsp&quot;/&gt;</span><br><span class="line">        &lt;!-- 自定义的过滤器链，从上向下执行，一般将`/**`放到最下面 --&gt;</span><br><span class="line">        &lt;property name=&quot;filterChainDefinitions&quot;&gt;</span><br><span class="line">            &lt;value&gt;</span><br><span class="line">                &lt;!--静态资源--&gt;</span><br><span class="line">                /static/** = anon</span><br><span class="line">                /lib/** = anon</span><br><span class="line">                /js/** = anon</span><br><span class="line"></span><br><span class="line">                &lt;!--登录页面与请求--&gt;</span><br><span class="line">                /login.jsp = anon</span><br><span class="line">                /login = anon</span><br><span class="line">                &lt;!--登出--&gt;</span><br><span class="line">                /logout = logout</span><br><span class="line">                &lt;!--登录后可访问主页--&gt;</span><br><span class="line">                /index.jsp = user</span><br><span class="line">                &lt;!--所有请求--&gt;</span><br><span class="line">                /** = user</span><br><span class="line">            &lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Shiro安全管理器--&gt;</span><br><span class="line">    &lt;bean id=&quot;securityManager&quot; class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;realm&quot; ref=&quot;userRealm&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--自定义Realm--&gt;</span><br><span class="line">    &lt;bean id=&quot;userRealm&quot; class=&quot;com.bigbilii.realm.UserRealm&quot;&gt;</span><br><span class="line">        &lt;!-- 使用credentialsMatcher实现密码验证服务 --&gt;</span><br><span class="line">        &lt;property name=&quot;credentialsMatcher&quot; ref=&quot;credentialsMatcher&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--密码匹配过程--&gt;</span><br><span class="line">    &lt;bean id=&quot;credentialsMatcher&quot; class=&quot;org.apache.shiro.authc.credential.HashedCredentialsMatcher  &quot;&gt;</span><br><span class="line">        &lt;!--加密算法名称--&gt;</span><br><span class="line">        &lt;property name=&quot;hashAlgorithmName&quot; value=&quot;md5&quot;/&gt;</span><br><span class="line">        &lt;!--加盐次数--&gt;</span><br><span class="line">        &lt;property name=&quot;hashIterations&quot; value=&quot;2&quot;/&gt;</span><br><span class="line">        &lt;!--是否存储散列后的密码为16进制--&gt;</span><br><span class="line">        &lt;property name=&quot;storedCredentialsHexEncoded&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Shiro生命周期处理器--&gt;</span><br><span class="line">    &lt;bean id=&quot;lifecycleBeanPostProcessor&quot; class=&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>在配置完这些之后，shiro的spring配置文件也基本告一段落，在上面的配置信息中，有两个值得注意的地方。<br>一个是<code>filterChainDefinitions</code>自定义拦截链，这个是从上往下执行的，也就是执行第一次匹配成功的结果，下面是部分默认拦截器的说明：<br>|拦截器名|说明|<br>|—|—- |<br>|authc|基于表单的拦截器，其拦截的请求必须是通过登录验证的|<br>|logout|退出拦截器，主要属性：redirectUrl：退出成功后重定向的地址（/）;示例“/logout=logout”|<br>|user|用户拦截器，用户已经身份验证/记住我登录的都可；示例“/<strong>=user”|<br>|anon|匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤；示例“/static/</strong>=anon”|</p><p>另外一个是<code>userRealm</code>自定义realm。</p><h2 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h2><p>Shiro的<code>SecurityManager</code>从<code>Realm</code>中获取安全数据，而Shiro自带了一些Realm可以是我们能够提供安全数据给Shiro做认证，但当数据较为复杂，自带的Realm功能就不能满足业务需求，这时就需要自定义Realm。</p><p>下面的<code>UserRealm</code>要实现授权和认证两个功能，所以继承了<code>AuthorizingRealm</code>类，因为它继承了<code>AuthenticatingRealm</code>类，所以可以同时实现授权和认证两个功能，需要对<code>doGetAuthorizationInfo()</code>和<code>doGetAuthenticationInfo()</code>方法进行重写。下面是源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public class UserRealm extends AuthorizingRealm &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    UserService userService;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) &#123;</span><br><span class="line">        System.out.println(&quot;权限校验&quot;);</span><br><span class="line">        String username = (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();</span><br><span class="line">        Set&lt;String&gt; role = new HashSet&lt;String&gt;();</span><br><span class="line">        /*获取角色信息*/</span><br><span class="line">        List&lt;Role&gt; roles = userService.findRoles(username);</span><br><span class="line">        for (Role r : roles)&#123;</span><br><span class="line">            role.add(r.getname());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;!!!!!!!!!!! 添加role&quot; + role);</span><br><span class="line">        authorizationInfo.setRoles(role);</span><br><span class="line">        /*获取权限信息*/</span><br><span class="line">        List&lt;Permission&gt; permissions = userService.findPermissions(username);</span><br><span class="line">        Set&lt;String&gt; permission = new HashSet&lt;String&gt;();</span><br><span class="line">        for (Permission p : permissions)&#123;</span><br><span class="line">            permission.add(p.getname());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;!!!!!!!!!!! 添加permission&quot; + permission);</span><br><span class="line">        authorizationInfo.setStringPermissions(permission);</span><br><span class="line"></span><br><span class="line">        /*返回角色和权限信息，交给AuthenticationRealm进行角色权限匹配*/</span><br><span class="line">        return authorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException &#123;</span><br><span class="line">        System.out.println(&quot;权限校验&quot;);</span><br><span class="line">        String username = (String) authenticationToken.getPrincipal();</span><br><span class="line"></span><br><span class="line">        /*获取用户信息*/</span><br><span class="line">        User user = userService.findByName(username);</span><br><span class="line"></span><br><span class="line">        if (user == null) &#123;</span><br><span class="line">            throw new UnknownAccountException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*返回认证信息，交给AuthenticationRealm进行密码匹配*/</span><br><span class="line">        SimpleAuthenticationInfo authenticationInfo = new SimpleAuthenticationInfo(</span><br><span class="line">                user.getUsername(),</span><br><span class="line">                user.getPassword(),</span><br><span class="line">                ByteSource.Util.bytes(user.getCredentialsSalt()),</span><br><span class="line">                getName()</span><br><span class="line">        );</span><br><span class="line">        return authenticationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>大部分流程都是用注解标注了。下面来看一下具体UserRealm是如何工作的。</p><h3 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class LoginController &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 登录验证</span><br><span class="line">     *</span><br><span class="line">     * @param username 用户名</span><br><span class="line">     * @param password 密码</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping</span><br><span class="line">    public Result login(@RequestParam(value = &quot;username&quot;, required = false) String username,</span><br><span class="line">                        @RequestParam(value = &quot;password&quot;, required = false) String password) &#123;</span><br><span class="line">        System.out.println(&quot;账号:&quot; + username + &quot;,密码:&quot; + password);</span><br><span class="line">        if (username != null &amp;&amp; password != null) &#123;</span><br><span class="line">            Subject subject = SecurityUtils.getSubject();</span><br><span class="line">            UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line">            subject.login(token);</span><br><span class="line">            return Result.message(200,&quot;登录成功&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return Result.message(401,&quot;用户名或密码错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体流程：</p><ol><li>从请求中回去了提交的<code>username</code>和<code>password</code>，将获取到的用户名和密码设置成Token。然后回去主体<code>Subject</code>，因为在Spring的配置文件中已经初始化<code>SecurityManager</code>和设置了<code>UserRealm</code>，所以可以直接获取主体。</li><li>调用<code>login()</code>方法，然后<code>SecurityManager</code>会委派<code>Authenticator</code>调用自定义Realm的认证方法，也就是我们重写的<code>doGetAuthenticationInfo()</code>方法，其中的<code>authenticationToken</code>参数也就是我们之前封装的token。</li><li>进入到我们的方法后，我们通过service服务层去获取数据库的信息，获取到数据库的账号密码，注意：数据库的密码是加密处理的，所以取到密码和前台传入的明文密码不能匹配。</li><li>获取到数据库信息之后，将信息封装到<code>SimpleAuthenticationInfo</code>实例，返回给<code>Authenticator</code>做密码认证，因为在配置文件中，设置了<code>credentialsMatcher</code>密码认证过程，所以<code>Authenticator</code>也会去调用这个密码认证过程，将token中储存的明文密码进行加密，与数据库的加密密码进行匹配，从而认证。</li></ol><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>在上面的登录验证过程中，多次提到了密码加密问题，这个问题也是非常常见的，在实际项目中，不可能使用明文密码进行存储，都会用到加密技术，而Shiro也支持加密。</p><p>具体的加密技术不是本文的重点，所以不会过多介绍。下面是我封装的一个加密工具，用于为用户进行加密处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class PasswordHelper &#123;</span><br><span class="line">    private RandomNumberGenerator randomNumberGenerator = new SecureRandomNumberGenerator();</span><br><span class="line"></span><br><span class="line">    private String algorithName = &quot;MD5&quot;;</span><br><span class="line">    private int hashInterations = 2;</span><br><span class="line"></span><br><span class="line">    //加密算法</span><br><span class="line">    public void encryptPassword(User user)&#123;</span><br><span class="line">        if (user.getPassword() != null)&#123;</span><br><span class="line">            //对user对象设置盐：salt；这个盐值是randomNumberGenerator生成的随机数</span><br><span class="line">            user.setSalt(randomNumberGenerator.nextBytes().toHex());</span><br><span class="line"></span><br><span class="line">            //调用SimpleHash指定散列算法参数：1、算法名称；2、用户输入的密码；3、盐值（随机生成的）；4、迭代次数</span><br><span class="line">            String newPassword = new SimpleHash(</span><br><span class="line">                    algorithName,</span><br><span class="line">                    user.getPassword(),</span><br><span class="line">                    ByteSource.Util.bytes(user.getCredentialsSalt()),</span><br><span class="line">                    hashInterations).toHex();</span><br><span class="line">            user.setPassword(newPassword);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体流程：</p><ol><li>通过<code>RandomNumberGenerator</code>随机生成盐值，并设置成用户的盐值</li><li>通过<code>SimpleHash</code>实例来构造一个加密密码，参数中，第三个盐值是【用户名+随机盐值】</li><li>设置用户的加密密码</li></ol><p>值得注意的是：<code>algorithName</code>和<code>hashInterations</code>是需要提前约定的，这样生成用户的密码的加密方式和Shiro配置的<code>credentialsMatcher</code>密码认证过程的加密方式才能一致。</p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>首先，在用户表中添加两个用户，一个当管理员，一个当普通用户.</p><p>然后在数据库插入几条授权需要用到的信息，sql如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">insert into permission values(1,&apos;resource:create&apos;,&apos;用户新增&apos; );</span><br><span class="line">insert into permission values(2,&apos;user:update&apos;,&apos;用户修改&apos; );</span><br><span class="line">insert into permission values(3,&apos;user:delete&apos;,&apos;用户删除&apos; );</span><br><span class="line">insert into permission values(4,&apos;user:view&apos;, &apos;用户查看&apos; );</span><br><span class="line">insert into permission values(5,&apos;role:update&apos;, &apos;角色更新&apos;);</span><br><span class="line">insert into permission values(6,&apos;role:delete&apos;, &apos;角色删除&apos;);</span><br><span class="line">insert into permission values(7,&apos;role:create&apos;, &apos;角色创建&apos;);</span><br><span class="line">insert into permission values(8,&apos;role:view&apos;, &apos;角色查看&apos;);</span><br><span class="line">insert into permission values(9,&apos;news:view&apos;, &apos;新闻查看&apos;);</span><br><span class="line"></span><br><span class="line">insert into role values(1,&apos;admin&apos;,&apos;管理员&apos;);</span><br><span class="line">insert into role values(2,&apos;user&apos;,&apos;普通用户&apos;);</span><br><span class="line"></span><br><span class="line">insert into role_premission values(1,1);</span><br><span class="line">insert into role_premission values(1,2);</span><br><span class="line">insert into role_premission values(1,3);</span><br><span class="line">insert into role_premission values(1,4);</span><br><span class="line">insert into role_premission values(1,5);</span><br><span class="line">insert into role_premission values(1,6);</span><br><span class="line">insert into role_premission values(1,7);</span><br><span class="line">insert into role_premission values(1,8);</span><br><span class="line">insert into role_premission values(1,9);</span><br><span class="line">insert into role_premission values(2,9);</span><br><span class="line"></span><br><span class="line">insert into user_role values(1,1);</span><br><span class="line">insert into user_role values(2,2);</span><br></pre></td></tr></table></figure><p>然后来看下我们的UserController，这里采用的是RESTFul设计<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @RequiresPermissions(&quot;user:insert&quot;)</span><br><span class="line">    @PostMapping</span><br><span class="line">    public Result insert(@RequestBody User user) &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line">        userService.insert(user);</span><br><span class="line">        return Result.message(200, &quot;创建用户成功&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequiresPermissions(&quot;user:delete&quot;)</span><br><span class="line">    @DeleteMapping</span><br><span class="line">    public Result delete(String username) &#123;</span><br><span class="line">        System.out.println(&quot;删除&quot;);</span><br><span class="line"></span><br><span class="line">        userService.delete(username);</span><br><span class="line">        return Result.message(200, &quot;删除用户成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequiresPermissions(&quot;user:view&quot;)</span><br><span class="line">    @GetMapping</span><br><span class="line">    public Result query() &#123;</span><br><span class="line">        System.out.println(&quot;查询&quot;);</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = userService.query();</span><br><span class="line">        return Result.message(200, &quot;查询用户成功&quot;).add(&quot;users&quot;,users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过<code>@RequiresPermissions()</code>这个注解来控制权限登录，除了这个注解，还有其他的授权控制注解。<br>| | |<br>|-|-|<br>|@RequiresAuthentication|表示当前Subject已经通过login身份验证；即Subject.isAuthenticated() == true；否则就拦截|<br>|@RequiresUser|表示当前Subject已经通过login身份验证或通过记住我登录；否则就拦截|<br>|@RequiresGuest|表示当前Subject没有身份验证或通过记住我登录过，即是游客身份|<br>|@RequiresRoles(admin)|表示当前Subject需要admin角色|<br>|@RequiresPermissions(“user:insert”)|表示当前Subject需要拥有”user:insert”权限|</p><p>值得注意的是：某些shiro注解需要AOP功能进行判断,所以在springmvc配置文件中开启shiro spring AOP的支持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:config proxy-target-class=&quot;true&quot;/&gt;</span><br><span class="line">   &lt;bean class=&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>然后回过头来看下我们的<code>UserReaml</code>的<code>doGetAuthorizationInfo</code>方法。</p><p>在该方法中，通过service获取到role信息和premission信息，其实可以不用回去role信息的，因为我们在controller层是通过premission来控制权限的。</p><p><strong>问题</strong></p><p>在这里的时候，我发现了一个问题：我在设计controller时，通过premisson来控制，所以需要在数据库获取permission，但在我们之前的表设计，通过用户名来获取到permission，需要5张表连接，故在这里可以自行进行优化。</p><h2 id="关于RESTFul"><a href="#关于RESTFul" class="headerlink" title="关于RESTFul"></a>关于RESTFul</h2><p>RESTFul是一种接口开发设计规范，是Representational State Transfer的缩写，其意为“表现层状态转化”，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。REST认为，每一个URL都是一种资源，所有的操作都是对资源的操作，而不同的操作主要使用HTTP动词来表示。<br>|方法|    含义|<br>|-|-|<br>|GET（SELECT）|    从服务器取出资源（一项或多项）|<br>|POST（CREATE）    |在服务器新建一个资源|<br>|PUT（UPDATE）|    在服务器更新资源（客户端提供改变后的完整资源）|<br>|DELETE（DELETE）    |从服务器删除资源|<br>|HEAD    |获取资源的元数据|<br>|OPTIONS    |获取信息，关于资源的哪些属性是客户端可以改变的|</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次通过Shiro配合SSM框架写了个小demo，但可以看到有个明显的性能问题：每次到需要处理权限问题的请求的时候，都需要去数据库里获取相应的信息，这对性能的消耗很大，所以在之后会加入缓存的处理。由于我现在对缓存的运用不是很熟悉，在之后的学习中，会对这里的进行升级。</p><p>源码：<a href="https://github.com/bigbilii/Shiro" target="_blank" rel="noopener">https://github.com/bigbilii/Shiro</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习技术，最重要的是实践。&lt;/p&gt;
&lt;p&gt;本着上面的原则，学习玩shiro基本知识之后，我也动手写了一个小demo，来熟悉下shiro。&lt;/
      
    
    </summary>
    
      <category term="Shiro" scheme="https://bigbilii.github.io/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="https://bigbilii.github.io/tags/Shiro/"/>
    
      <category term="Spring" scheme="https://bigbilii.github.io/tags/Spring/"/>
    
      <category term="RBAC" scheme="https://bigbilii.github.io/tags/RBAC/"/>
    
  </entry>
  
  <entry>
    <title>Shiro-授权管理</title>
    <link href="https://bigbilii.github.io/2019/01/12/Shiro-%E6%8E%88%E6%9D%83%E7%AE%A1%E7%90%86/"/>
    <id>https://bigbilii.github.io/2019/01/12/Shiro-授权管理/</id>
    <published>2019-01-12T02:50:10.000Z</published>
    <updated>2019-01-12T06:55:18.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="授权管理"><a href="#授权管理" class="headerlink" title="授权管理"></a>授权管理</h2><p>授权管理，也就是访问控制，是控制主体对指定资源的访问权限，简单地说，就是谁有权访问什么。</p><blockquote><p>Examples of authorization checks are: Is the user allowed to look at this webpage, edit this data, view this button, or print to this printer? Those are all decisions determining what a user has access to.</p></blockquote><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>权限是<code>安全策略</code>中的原子级别，描述了资源类型和可执行操作。</p><p>常见的资源操作就是CRUD，也就是创建、读取、更新、删除。</p><blockquote><p>一些权限示例</p><ul><li>打开一个文件</li><li>查看“/ user / list”网页</li><li>打印文件</li><li>删除’jsmith’用户</li></ul></blockquote><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>角色是一个权限的集合，是为简化权限的用户管理和用户管理。</p><p>值得注意的是，Shiro同时支持的两种角色。</p><ul><li>隐式角色：通过验证<code>角色</code>来验证用户有没有操作权限，粒度为<code>角色</code>。例如：如果你是<code>管理员</code>，你则有创建和删除的权限，而如果你是<code>浏览者</code>，你则只有查询的权限。</li><li>显式角色：通过验证<code>权限</code>来验证用户有没有操作权限，粒度为<code>权限</code>。例如：如果你有<code>删除权限</code>，则你可以执行删除操作，如果你有<code>查询权限</code>，则你可以执行查询。</li></ul><h2 id="Shiro中的授权方式"><a href="#Shiro中的授权方式" class="headerlink" title="Shiro中的授权方式"></a>Shiro中的授权方式</h2><p>Shiro的授权可以分为四种方式：</p><ul><li>编程方式：在程序中以<code>if</code>和<code>else</code>代码块的方式执行授权检查</li><li>JDK注解：通过授权注解的方式附加到Java程序中</li><li>JSP/GSP TagLibs：可以在jsp或gsp页面中根据权限进行页面输出</li></ul><p>在下面的代码中，将会检查用户是否具有<code>admin</code>权限。可以看出不同方式的区别。</p><h3 id="程序化授权"><a href="#程序化授权" class="headerlink" title="程序化授权"></a>程序化授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">/*hasRole()方法判断用户的角色*/</span><br><span class="line">if (subject.hasRole(&quot;admin&quot;)) &#123;</span><br><span class="line">    //具有管理员权限</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    //不具有管理员权限</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码通过隐式角色的方式来验证。为了以后更好的维护代码，下面将会采用显式的方法来实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">/*基于字符串检查权限*/</span><br><span class="line">String perm = &quot;admin:delete&quot;;</span><br><span class="line"></span><br><span class="line">if (subject.isPermitted(perm)) &#123;</span><br><span class="line">    //具有管理员的删除权限</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    //不具有管理员的删除权限</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于字符串的权限检查，好处是简单，快速通过字符串构造权限，缺点是没有类型安全。</p><p>如果需要复杂的权限功能，则需要基于权限接口实现自己的权限对象，这里就不叙述。</p><h3 id="注解授权"><a href="#注解授权" class="headerlink" title="注解授权"></a>注解授权</h3><p>使用注解授权，需要应用程序启动AOP支持。有不同的AOP框架，在Shiro文档中，找到了对不同框架的帮助文档。</p><p>对于AspectJ，您可以查看我们的<a href="https://github.com/apache/shiro/tree/master/samples/aspectj" target="_blank" rel="noopener">AspectJ</a>示例应用程序。</p><p>对于Spring，您可以查看我们的<a href="http://shiro.apache.org/spring.html" target="_blank" rel="noopener">Spring Integration</a>文档。</p><p>对于Guice，您可以查看我们的<a href="http://shiro.apache.org/guice.html" target="_blank" rel="noopener">Guice Integration</a>文档。</p><p>和上面一样，采用权限和角色实现注解检查。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*权限检查*/</span><br><span class="line">@RequiresPermissions(&quot;admin:delete&quot;)‏</span><br><span class="line">public void deleteGoods(UUID id ) &#123;</span><br><span class="line">    //删除物品</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*角色检查*/</span><br><span class="line">@RequiresPermissions(&quot;admin&quot;)‏</span><br><span class="line">public void deleteGoods(UUID id ) &#123;</span><br><span class="line">    //删除物品</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述如果角色权限正确，执行方法；如果错误，抛出异常。</p><h3 id="JSP-TagLib授权"><a href="#JSP-TagLib授权" class="headerlink" title="JSP TagLib授权"></a>JSP TagLib授权</h3><p>对于基于JSP/GSP的Web应用，Shiro提供了一个<a href="http://shiro.apache.org/jsp-tag-library.html" target="_blank" rel="noopener">标签库</a>使用。</p><p>具体使用代码如下，也是采用闲事和隐式两种方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*引入标签库*/</span><br><span class="line">&lt;%@ taglib prefix=&quot;shiro&quot; uri=http://shiro.apache.org/tags %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    /*具有admin的删除权限*/</span><br><span class="line">    &lt;shiro:hasPermission name=&quot;admin:delete&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;goods/delete&quot;&gt;</span><br><span class="line">            点击删除</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/shiro:hasPermission&gt;</span><br><span class="line"></span><br><span class="line">    /*是否为admin角色*/</span><br><span class="line">    &lt;shiro:hasRole name=&quot;admin&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;goods/delete&quot;&gt;</span><br><span class="line">            点击删除</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/shiro:hasRole&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><p>本例子延续前篇的【简单例子】使用，如果没有看过，则自行跳转查看。</p><blockquote><p><a href="https://bigbilii.github.io/2019/01/10/Shiro-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/">Shrio-权限管理</a>的简单例子</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">package com.bigbilii.test;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.authz.AuthorizationException;</span><br><span class="line">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line">import org.apache.shiro.realm.SimpleAccountRealm;</span><br><span class="line">import org.apache.shiro.realm.jdbc.JdbcRealm;</span><br><span class="line">import org.apache.shiro.realm.text.IniRealm;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.junit.Assert;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class AuthenticationTest &#123;</span><br><span class="line"></span><br><span class="line">    /*简单的Realm*/</span><br><span class="line">    SimpleAccountRealm realm = new SimpleAccountRealm();</span><br><span class="line">    JdbcRealm jdbcRealm = new JdbcRealm();</span><br><span class="line">    IniRealm iniRealm = new IniRealm();</span><br><span class="line"></span><br><span class="line">    /*向Realm添加用户认证信息*/</span><br><span class="line">    @Before</span><br><span class="line">    public void addUser() &#123;</span><br><span class="line">        /* 添加用户，并设置成admin、user两个角色，既Bilii同时具有admin和user角色的权限*/</span><br><span class="line">        realm.addAccount(&quot;Bilii&quot;, &quot;123&quot;, &quot;admin&quot;, &quot;user&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testAuthentication() &#123;</span><br><span class="line">        /*构建SecurityManager环境*/</span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();</span><br><span class="line">        /*添加Realm*/</span><br><span class="line">        defaultSecurityManager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        /*主体提交认证信息*/</span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken token = new UsernamePasswordToken(&quot;Bilii&quot;, &quot;123&quot;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            /*登录（验证身份）*/</span><br><span class="line">            subject.login(token);</span><br><span class="line"></span><br><span class="line">        &#125; catch (AuthenticationException e) &#123;</span><br><span class="line">            /*登录失败*/</span><br><span class="line">            System.out.println(&quot;登录失败&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(true, subject.isAuthenticated());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            /*检查是否具有admin权限*/</span><br><span class="line">            subject.checkRole(&quot;admin&quot;);</span><br><span class="line">        &#125; catch (AuthorizationException e) &#123;</span><br><span class="line">            /*登录失败*/</span><br><span class="line">            System.out.println(&quot;不具备admin的权限&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            /*检查是否同时具有admin和user权限*/</span><br><span class="line">            subject.checkRoles(&quot;admin&quot;, &quot;user&quot;);</span><br><span class="line">        &#125; catch (AuthorizationException e) &#123;</span><br><span class="line">            /*登录失败*/</span><br><span class="line">            System.out.println(&quot;不同时具备admin和user的权限&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*登出*/</span><br><span class="line">        subject.logout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体流程与权限管理类似，只是授权认证的具体操作是交给<code>Authorizer</code>去调用相应的方法去检查<code>Realm</code>的授权信息，具体不展开。</p><p>由于上次权限管理采用的是<code>SimpleAccountRealm</code>这个简单的Realm实现类，没有权限的设置方法，既无法在初始化的时候，这是<code>Bilii</code>的具体权限，粒度在于角色。之后会有演示。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在授权管理中，为了便于项目维护，尽量使用<code>用户-角色</code>+<code>角色-权限</code>的设计思想，既显示角色。</p><p>用了两篇文章，分别介绍了授权和登录管理的简单实现。之后会整体利用Shiro+SSM简单实现一个简单的小项目。在该项目中，将会介绍到之前没有使用的<code>自定义Realm</code>和其他一些技术。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;授权管理&quot;&gt;&lt;a href=&quot;#授权管理&quot; class=&quot;headerlink&quot; title=&quot;授权管理&quot;&gt;&lt;/a&gt;授权管理&lt;/h2&gt;&lt;p&gt;授权管理，也就是访问控制，是控制主体对指定资源的访问权限，简单地说，就是谁有权访问什么。&lt;/p&gt;
&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="Shiro" scheme="https://bigbilii.github.io/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="https://bigbilii.github.io/tags/Shiro/"/>
    
      <category term="授权" scheme="https://bigbilii.github.io/tags/%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Shiro-权限管理</title>
    <link href="https://bigbilii.github.io/2019/01/10/Shiro-%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    <id>https://bigbilii.github.io/2019/01/10/Shiro-权限管理/</id>
    <published>2019-01-10T07:35:13.000Z</published>
    <updated>2019-01-12T06:29:56.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>昨天在写完<a href="https://bigbilii.github.io/2019/01/09/Shiro-%E5%85%A5%E9%97%A8%E4%BA%86%E8%A7%A3/">Shiro-入门了解</a>之后，了解了下【关联规则】的相关知识，其中涉及到的技术栈有Python、机器学习相关知识，但作为一个Java新手开发者，对这方面的了解甚少。所以已经将下面的技术提上了近期学习日程：</p><ul><li>Python快速入门上手：对于语言的学习不是关键，能够达到可以使用的程度就行</li><li>机器学习体系和相关知识学习：之前由于对机器学习的了解不多，所以会在之后学习下机器学习的体系和相关技术知识</li><li>关联分析算法实战：对于关联分析的相关算法进行学习和实战演练，如Apriori、FP-growth</li></ul><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><p>言归正传，所谓<strong>权限管理</strong>，也就是身份验证，即在应用中证明操作的是本人。一般通过用户名/密码的方式来证明，也就是<code>principals</code>和<code>Credentials</code>组合方式。</p><p>所以需要的学术名词：</p><ul><li><strong>Subject</strong>：主体，在上篇文章中做出过介绍，这里就不累述</li><li><strong>Realms</strong>：安全数据连接对象，在上篇文章中做出过介绍，这里就不累述</li><li><strong>Principals</strong>：身份，主体识别属性，可以是任何东西，如用户名、邮箱、手机号等，需要唯一。注意：一个主体可以有多个<code>principals</code>，但是能有一个<code>Primary principals</code>，例如姓名/手机号/用户名/邮箱等</li><li><strong>Credentials</strong>：证书，用来验证机密数据，如密码/安全证书</li></ul><p>在Shiro或则其他大多数的安全框架中，Java的验证过程可以拆分成下面三个步骤：</p><ol><li>获取<code>Subject</code>的<code>principals</code>和<code>credentials</code></li><li>将获取到的<code>principals</code>和<code>credentials</code>提交给验证系统</li><li>允许访问 | 重试验证 | 拒绝</li></ol><p>在实际使用中，过程比上述复杂，但总体流程是这么回事。</p><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2><p>为了直观的了解到Shiro如何进行权限管理。编写了下面一段测试代码。</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package com.bigbilii.test;</span><br><span class="line"></span><br><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.AuthenticationException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.mgt.DefaultSecurityManager;</span><br><span class="line">import org.apache.shiro.realm.SimpleAccountRealm;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.junit.Assert;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class AuthenticationTest &#123;</span><br><span class="line"></span><br><span class="line">    /*简单的Realm*/</span><br><span class="line">    SimpleAccountRealm realm = new SimpleAccountRealm();</span><br><span class="line"></span><br><span class="line">    /*向Realm添加用户认证信息*/</span><br><span class="line">    @Before</span><br><span class="line">    public void addUser() &#123;</span><br><span class="line">        realm.addAccount(&quot;Bilii&quot;, &quot;123&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testAuthentication() &#123;</span><br><span class="line">        /*1.构建SecurityManager环境*/</span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = new DefaultSecurityManager();</span><br><span class="line"></span><br><span class="line">        /*2.添加Realm*/</span><br><span class="line">        defaultSecurityManager.setRealm(realm);</span><br><span class="line"></span><br><span class="line">        /*3.主体提交认证信息*/</span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">        UsernamePasswordToken token = new UsernamePasswordToken(&quot;Bilii&quot;, &quot;123&quot;);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            /*4.登录（验证身份）*/</span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; catch (AuthenticationException e) &#123;</span><br><span class="line">            /*5.登录失败*/</span><br><span class="line">            System.out.println(&quot;登录失败&quot;);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(true, subject.isAuthenticated());</span><br><span class="line"></span><br><span class="line">        /*6.登出*/</span><br><span class="line">        subject.logout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><ul><li>首先需要构建<code>SecurityManager</code>环境，这里使用的new实例化</li><li>添加<code>Realm</code>，由于是简单演示，所以采用的是<code>SimpleAccountRealm</code>，并提前利用<code>addUser()</code>方法来获得认证信息。除了上述方法，还有<code>JdbcRealm</code>、<code>IniRealm</code>等自带Realm，可以更加方便的使用数据库或者配置文件来读入认证信息。后面还会利用<code>自定义Realm</code>来获取认证信息</li><li>主体提交认证信息，通过工厂类，将<code>SecurityManager</code>实例化并绑定到<code>SecurityUtils</code>,并通过<code>SecurityUtils</code>的<code>getSubject()</code>方法来获取主体，绑定到当前线程。在将从前端获得的输入认证信息实例化成<code>Token</code></li><li>登录，调用<code>subject.login()</code>方法登录。会调用<code>SecurityManager.login()</code>方法登录</li><li>登出，调用<code>subject.logout()</code>方法登录。会调用<code>SecurityManager.logout()</code>方法登录</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上述例子，很简单，但也很清晰的描述了Shiro在认证管理时的工作流程。在实际Web项目开发中，都会结合<code>Spring</code>框架集成使用，<code>Realm</code>的逻辑也会更复杂，所以需要<code>自定义Ream</code>来实际结合业务逻辑，之后的文章会详细讲下如何在<code>Spring</code>中使用Shiro，以及数据库的建表注意事项。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://shiro.apache.org/java-authentication-guide.html" target="_blank" rel="noopener">Java Authentication Guide with Apache Shiro</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;昨天在写完&lt;a href=&quot;https://bigbilii.github.io/2019/01/09/Shiro-%E5%85%A5%E9
      
    
    </summary>
    
      <category term="Shiro" scheme="https://bigbilii.github.io/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="https://bigbilii.github.io/tags/Shiro/"/>
    
      <category term="权限管理" scheme="https://bigbilii.github.io/tags/%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Shiro-入门了解</title>
    <link href="https://bigbilii.github.io/2019/01/09/Shiro-%E5%85%A5%E9%97%A8%E4%BA%86%E8%A7%A3/"/>
    <id>https://bigbilii.github.io/2019/01/09/Shiro-入门了解/</id>
    <published>2019-01-09T08:49:43.000Z</published>
    <updated>2019-01-09T10:39:33.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言（废话）"><a href="#前言（废话）" class="headerlink" title="前言（废话）"></a>前言（废话）</h2><p>从泰国回来没几天，收到消息说我之前选的毕业设计题目没选上，导师通知我回学校确定题目。最终题目定下来了，是【基于关联规则的餐厅智能荐菜系统的研究与实现】。</p><p>其中的【关联规则】没接触过，需要接下来的时间去了解，但就题目而言，也就是一个餐厅点菜系统+个性化推荐。在3月份的开题报告之前，完成项目调查、分析和架构设计，同时也对数据挖掘或者机器学习方面做一些了解。</p><p>废话也不多说，接下来了解下Shiro，这个技术也会在我的毕业设计中使用。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Apache Shiro是Java的一个安全框架。其开源易用的特点，使得使用Shiro的人也是越来越多。</p><p>Shiro的主要功能如下：</p><ul><li><strong>Authentication</strong>：身份认证，也就是我们日常使用的登录</li><li><strong>Authorization</strong>：授权，也就是权限验证</li><li><strong>Session Management</strong>：会话管理</li><li><strong>Cache Management</strong>：缓存管理</li><li><strong>cryptography</strong>：加密</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>从Shiro官方文档中，截取了下面的图片来了解下Shiro的核心架构。</p><p><img src="https://api.superbed.cn/pic/5c35c1ba9dc6d6521665fd13" alt=""></p><ul><li>Subject（<a href="http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/subject/Subject.html" target="_blank" rel="noopener">org.apache.shiro.subject.Subject</a>）： 主体，当前与软件交互的实体（用户、第三方服务等）</li><li><strong>SecurityManager</strong>（<a href="http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/mgt/SecurityManager.html" target="_blank" rel="noopener">org.apache.shiro.mgt.SecurityManager</a>）：Shiro的核心，<code>SecurityManager</code>管理则所有组件，所有具体交互都需要通过它进行控制</li><li><strong>Authenticator</strong>（<a href="http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/authc/Authenticator.html" target="_blank" rel="noopener">org.apache.shiro.authc.Authenticator</a>）：认证器，负责主体的验证。当用户登录时，逻辑由<code>Authenticator</code>执行，并且<code>Authenticator</code>知道协调调用一个或多个<code>Realms</code>储存的用户/账号信息</li><li><strong>Authrizer</strong>（<a href="http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/authz/Authorizer.html" target="_blank" rel="noopener">org.apache.shiro.authz.Authorizer</a>）：认证器，负责主体的权限验证操作。原理与认证器相识，也知道<code>Realms</code>储存的权限信息</li><li><strong>SessionManager</strong>（<a href="http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/session/mgt/SessionManager.html" target="_blank" rel="noopener">org.apache.shiro.session.mgt.SessionManager</a>）：会话控制器，用来管理<code>Session</code>的生命周期，提供强大的会话机制。可以在没有Web/Servlet或EJB容器中使用会话机制。</li><li><strong>CacheManager</strong>（<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/cache/CacheManager.html" target="_blank" rel="noopener">org.apache.shiro.cache.CacheManager</a>）：缓存控制器，用来管理<code>Cache</code>的生命周期，提供为用户、角色、权限等的缓存机制，通过缓存来提高程序性能。</li><li><strong>Cryptography</strong>（<a href="http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/crypto/package-summary.html" target="_blank" rel="noopener">org.apache.shiro.crypto</a>）<br>密码模块，提供了一些常用的加密组件，用于比如密码的加密/解密</li><li><strong>Realm</strong>（<a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/realm/Realm.html" target="_blank" rel="noopener">org.apache.shiro.realm.Realm</a>）：Shiro和应用程序之间数据安全的【连接器】，由于Shiro并不知道用户/权限的存储方式和格式，一般需要用户自己实现<code>Realm</code></li></ul><p>了解到了Shiro的架构和组件，下一篇则会对Shiro的认证深入学习。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://shiro.apache.org/index.html" target="_blank" rel="noopener">SHIRO simple. Java. Security</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言（废话）&quot;&gt;&lt;a href=&quot;#前言（废话）&quot; class=&quot;headerlink&quot; title=&quot;前言（废话）&quot;&gt;&lt;/a&gt;前言（废话）&lt;/h2&gt;&lt;p&gt;从泰国回来没几天，收到消息说我之前选的毕业设计题目没选上，导师通知我回学校确定题目。最终题目定下来了，是【基
      
    
    </summary>
    
      <category term="Shiro" scheme="https://bigbilii.github.io/categories/Shiro/"/>
    
    
      <category term="Shiro" scheme="https://bigbilii.github.io/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>泰国旅游小记</title>
    <link href="https://bigbilii.github.io/2019/01/04/%E6%B3%B0%E5%9B%BD%E6%97%85%E6%B8%B8%E5%B0%8F%E8%AE%B0/"/>
    <id>https://bigbilii.github.io/2019/01/04/泰国旅游小记/</id>
    <published>2019-01-04T02:50:41.000Z</published>
    <updated>2019-01-04T03:52:51.303Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://api.superbed.cn/pic/5c2ed7b79dc6d62e1bd9d4ef" alt=""></p><p>“我们出去玩吧!”<br>“去哪?”<br>“泰国！”</p><p>半个月之前，一次短短的对话，定下了去泰国的行程。</p><h2 id="出发之前"><a href="#出发之前" class="headerlink" title="出发之前"></a>出发之前</h2><p>由于之前的20多年时光中没有出国的经历，所以至今还没护照，故随即预约了下个工作日的护照办理。重庆的护照预约很方便，在微信公众号上预约时间和办理类型即可。</p><p>预约当天，到达了当地的出入境大厅。问了问工作人员流程，到了一个自助照相的地方。排队、照相、拿取凭证，简单高效的流程让人感到舒适。因为是工作日，所以当时办理事务的人不多，拿取预约号之后，很快就轮到我们办理护照了，填写了一些信息，录入了脸部和指纹信息，然后交180块费用，就办理完成了，凭借回执单，在下个星期的星期三（大约7-8个工作日）来领取就行。</p><p>总体而言，办理护照的流程和效率都是相当高的。</p><p>办理完护照之后，开始考虑自由行还是跟团。之前在国内旅游，都是自由行，但考虑到第一次出国，应对突发状况方面的经验欠缺，故考虑跟团。</p><p>在网上翻阅了很多旅行团的行程，大同小异，分为低价团、购物团和纯玩团，价格也是依次递增。由于我和我女朋友都是学生，而且也都不爱管家里要钱，所以选择了一个在重庆出发的购屋团，行程中由三个购物店。</p><p>由于我们是网上订的行程，也提前了大概有半个月订的，在和之后团员了解下来，同一个行程，我们订的是最贵的。</p><p>办了护照和定了行程，接着就是准备去旅游时需要的东西了。我们在网上租借了一个gopro，算下来8天只需要70多块钱，还是挺不错的。准备了衣服和药品，在银行换取了1w泰铢，准备出发了。</p><p>值得注意的是，之前在泰国大使馆查阅落地签需要的资料时，所需要携带的现金为每人1w泰铢（大致为2k人民币），而旅行社这边要求我们每人携带5k人民币，其目的是为了让我们能够多消费。</p><h2 id="出发了"><a href="#出发了" class="headerlink" title="出发了"></a>出发了</h2><p>出发当天，由于害怕被遣返，携带了接近8k人民币，到达机场之后，在领队约定的地方签到。遇到了跟我们同团的一对老年夫妇，他们大致70岁了，我女朋友小陈和他们攀谈时，了解到他们经常出去跟团旅游，也多次要求携带大量现金，但他们都没有携带。故小陈则放下心，去机场ATM将我们携带的现金存了进去，只携带了1W泰铢和2k人民币，符合泰国大使馆公布的要求。</p><p>在签到时，要求我们购买每人80元的交通险，由于我是第一次出来跟团，也觉得80块不多，故想买，但小陈觉得我们之前以及买过保险，所以在询问可以不买时，则没有买，之后询问老年夫妇，他们也没有买。</p><p>在机场处理好了相关信息之后，开始入关登记，重庆江北机场T3航站楼还是很先进的，大部分都是自助完成，过关很方便。</p><p>我们乘坐的是亚航的飞机，携带了20kg的托运和飞机餐，由于廉航，飞机座位对于我这个180cm身高的人来说有点打不直腿，三小时的飞行对我来说有点难受。</p><p>到达泰国，领队拿着我们的护照和填好的出入境卡去办理落地签，因为最近泰国免落地签费用，则人有点多，等待时间有点久。办好落地签之后，排队出关。途中没有人来检查现金，害的我们白担心一场。</p><h2 id="曼谷"><a href="#曼谷" class="headerlink" title="曼谷"></a>曼谷</h2><p><img src="https://api.superbed.cn/pic/5c2ed7c89dc6d62e19145f2b" alt=""></p><p>下了飞机。</p><p>脱下身上的大衣、羽绒服。</p><p>鼻子呼吸到了第一口空气，热、灰尘、干燥。</p><p>出了廊曼机场，接待我们的是导游和司机，带我们去了酒店。酒店还不错，干净、安静。周围有7-11和全家的便利店，能够买到一些吃的和生活用品。价格还算便宜。</p><p>我们的行程，大致可以简化成这样：</p><p>酒店-大巴-团队景点-大巴-酒店</p><p>而景点除了人有点多，还算不错。但是我更喜欢在大巴的时间。</p><p>在大巴车上看曼谷。</p><p>鲜艳的颜色，寺庙，皇家标志，日本车和皮卡车混成的巨大车流，高速路下的大量铁板搭建的贫民窟窟，在低楼中树立着设计独特的高楼。</p><p>这些非常符合我印象中的泰国。</p><p>这就是泰国。</p><h2 id="芭提雅"><a href="#芭提雅" class="headerlink" title="芭提雅"></a>芭提雅</h2><p><img src="https://api.superbed.cn/pic/5c2ed8839dc6d62e1bd9d4f6" alt=""></p><p>情色表演，大量白人，海滩和太平洋，酒吧等，这些都是我对芭提雅这个地方的印象。</p><p>晚上的芭提雅才是芭提雅，夜空中的礼花和音乐声让这个城市变得躁动，随处可见的红灯区和酒吧，大量的酒精充满了街道。这些使小陈在街上走的时候，更加抱紧的我的手臂。</p><p>没有去酒吧，也没有洗泰浴，看了廉价的成人秀。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://api.superbed.cn/pic/5c2ed7e29dc6d62e1bd9d4f1" alt=""></p><p>第一次跟团，总的来说，花什么钱，旅什么游。</p><p>购物店无疑是最难受的行程，表面上是无需要强制购物，实则在第二天和第四天的行程中，导游的话术中，将购物绑架到了我们的身上，也很明显的感到，由于我们团队的购物水平不高，吃的东西也很差。</p><p>和小陈在海边的谈心很开心，虽然每天都有小吵架，但是我们都是喜欢着对方，每天都能和好。</p><p>活着，不是为了走遍全世界，也不是为了拥有什么东西，更不是需要成为什么样的人，活着就是活着。</p><p>去过一个景点，里面是泰国高僧的蜡像，每个蜡像旁，都会有高僧说的一句话，很遗憾的是当时没有记住那些话。但是唯一记住的，是他们的修行和思考，能够让他们成佛，让他们活着。</p><p>一次旅行，很高兴。小陈说她喜欢和我一起旅行，虽然旅行中会有吵架，但她还是喜欢和我一起旅行。</p><p>我也一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://api.superbed.cn/pic/5c2ed7b79dc6d62e1bd9d4ef&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;“我们出去玩吧!”&lt;br&gt;“去哪?”&lt;br&gt;“泰国！”&lt;/p&gt;
&lt;p&gt;半个月之前，一次短短的对话，定下了去泰国的行程
      
    
    </summary>
    
      <category term="随笔" scheme="https://bigbilii.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="泰国" scheme="https://bigbilii.github.io/tags/%E6%B3%B0%E5%9B%BD/"/>
    
      <category term="旅游" scheme="https://bigbilii.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="随笔" scheme="https://bigbilii.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Vagrant+VirtualBox搭建Linux开发环境</title>
    <link href="https://bigbilii.github.io/2019/01/03/Vagrant-Virtualbox%E6%90%AD%E5%BB%BALinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://bigbilii.github.io/2019/01/03/Vagrant-Virtualbox搭建Linux开发环境/</id>
    <published>2019-01-03T07:02:37.000Z</published>
    <updated>2019-01-03T08:14:06.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在我是用的开发环境是windows 10。然而在我之前工作中，常常会项目部署在Linux环境中，所以在开发的时候，也会经常用到Linux环境。这次我就在我本地win10环境利用Vagrant+VirtualBox搭建一个Centos7的环境。</p><h3 id="为什么选用Vagrant"><a href="#为什么选用Vagrant" class="headerlink" title="为什么选用Vagrant"></a>为什么选用Vagrant</h3><p>在我之前想要使用到Linux环境时，通常会使用虚拟机，如VirtualBox或者VMware，手动安装Linux系统和里面所需要的工作环境。</p><p>而使用Vagrant则可以省略上面的一些步骤，方便我们开发人员使用。</p><blockquote><p>Vagrant提供了易于配置，可重复和编写的工作环境，基于行业标准技术构建，由单一一致的工作流程控制，以帮助你和你的团队最大限度地提高生产力和灵活性。</p></blockquote><p>就开发人员而言，Vagrant可以大大简化我们平时配置环境的时间。只需要利用一个Vagrant文件，团队就可以创建出一个相同配置的开发环境，无论时Linux、Mac OS还是Windows。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h3><p>在<a href="https://www.virtualbox.org/" target="_blank" rel="noopener">官网</a>下载自己环境的安装包。</p><p><em>我下载的是windows 6.0.0版本</em></p><p>下载好之后，直接安装完成即可。</p><h3 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h3><p>在<a href="https://www.vagrantup.com/" target="_blank" rel="noopener">官网</a>下载好自己相应环境的安装包。</p><p><em>我下载的是windows 64位 2.2.2版本</em></p><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p>下载安装完成之后，在本地创建一个目录（如dev），进入目录，然后初始化项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd dev</span><br><span class="line">$ vagrant init</span><br></pre></td></tr></table></figure><h4 id="安装BOX"><a href="#安装BOX" class="headerlink" title="安装BOX"></a>安装BOX</h4><p>使用以下命令，则可以直接从官网下载box文件，并启动。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant init centos/7</span><br><span class="line">$ vagrant up --provider virtualbox</span><br></pre></td></tr></table></figure><p>如果下载速度慢，则可以从<a href="http://www.vagrantbox.es/" target="_blank" rel="noopener">官网</a>下载box文件，从本地加载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box add centos7 D:/software/boxes/centos-7.0-x86_64.box</span><br><span class="line">$ vagrant init centos7</span><br><span class="line">$ vagrant up</span><br></pre></td></tr></table></figure><p>其他Linux发行版操作类似。</p><h4 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h4><p>通过<code>vagrant up</code>命令，启动了刚才安装的Centos7，则可以直接通过ssh来登录虚拟机了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant ssh</span><br></pre></td></tr></table></figure><p><em>注意：windows中的cmd命令行不能支持ssh，需要使用其他SSH客户端</em></p><p><em>注意：使用客户端，如xShell登录时，账户密码为vagrant，一般端口为2222或者2200</em></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add         添加box的操作</span><br><span class="line">vagrant init            初始化box的操作，会生成vagrant的配置文件Vagrantfile</span><br><span class="line">vagrant up              启动本地环境</span><br><span class="line">vagrant ssh            通过 ssh 登录本地环境所在虚拟机</span><br><span class="line">vagrant halt            关闭本地环境</span><br><span class="line">vagrant suspend         暂停本地环境</span><br><span class="line">vagrant resume          恢复本地环境</span><br><span class="line">vagrant reload          修改了 Vagrantfile 后，使之生效（相当于先 halt，再 up）</span><br><span class="line">vagrant destroy         彻底移除本地环境</span><br><span class="line">vagrant box list        显示当前已经添加的box列表</span><br><span class="line">vagrant box remove      删除相应的box</span><br><span class="line">vagrant package         打包命令，可以把当前的运行的虚拟机环境进行打包</span><br><span class="line">vagrant plugin          用于安装卸载插件</span><br><span class="line">vagrant status          获取当前虚拟机的状态</span><br><span class="line">vagrant global-status   显示当前用户Vagrant的所有环境状态</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;现在我是用的开发环境是windows 10。然而在我之前工作中，常常会项目部署在Linux环境中，所以在开发的时候，也会经常用到Linux环
      
    
    </summary>
    
      <category term="Vagrant" scheme="https://bigbilii.github.io/categories/Vagrant/"/>
    
    
      <category term="Vagrant" scheme="https://bigbilii.github.io/tags/Vagrant/"/>
    
      <category term="VirtualBox" scheme="https://bigbilii.github.io/tags/VirtualBox/"/>
    
      <category term="Centos7" scheme="https://bigbilii.github.io/tags/Centos7/"/>
    
  </entry>
  
  <entry>
    <title>2018年终小结</title>
    <link href="https://bigbilii.github.io/2018/12/25/2018%E5%B9%B4%E7%BB%88%E5%B0%8F%E7%BB%93/"/>
    <id>https://bigbilii.github.io/2018/12/25/2018年终小结/</id>
    <published>2018-12-25T09:16:13.000Z</published>
    <updated>2018-12-25T10:12:35.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天把之前记的Maven笔记整理出来，之前也在学习Mybatis框架，可能会整理出文章来。</p><p>最近几天，在V2EX上看见有人讨论Linux发行版用哪个的问题，才发现我现在的开发环境没有Linux，随即开始着手搭建。用的是Vbox+Vagrant搭建的Centos7。之前在学校一直用的ubuntu，这次换了Centos，得好好习惯下。</p><h2 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h2><p>2018年底了，既然做了博客，就写篇年底总结来记录记录今年。下面开始流水账。</p><p>年初，作为大三下期的学生，课程当然很紧，每天课几乎都很多。但还是有空余时间，所以报了软考中级和六级考试。</p><p>到了期中，结了两门课，课程不是很多，但随即开始了3个课程设计和学校安排的实习，其中一个实习公司是Oracle。他们公司来宣讲的时候，准备了OCJP的免费考试名额作为奖励，通过考试获得，因为免费，所以没有犹豫的报名了，也顺利的拿到了名额。</p><p>5、6月份，完成了学习的课程设计，写好报告，完成了答辩。完成了软考中级，感觉良好。完成了OCJP考试，顺利通过。即将参加6级考试。参加了学校安排的生产实习，实习公司由学院安排，到的是培训机构进行实习。说是实习，其实更多像是培训，最终完成一个小组作品。这也是我第一次合作开发，学到了些东西。</p><p>期末，6级不出意外是挂了。由于感觉学校安排的实习不怎么样，我又想在秋招之前到公司实习下，故在网上投递简历。找了一家gis公司，在重庆主要和规划局做项目外包。在这家公司，实际接触到项目开发，由于不是互联网公司，作为Java开发的我，实际上做了环境搭建、部署，文档编写，测试，开发等多种工作。这也使我学到了很多东西，对项目开发的理解也具体化。</p><p>9月，在公司实习的我，想着开学之后就开始了秋招。所以一边完成工作的情况下，一边着手秋招的准备。投了一些公司，参加了百度、顺丰等的面试，但是由于一边实习，一边准备，没有准备太充分，所以效果都不太好，所以有了辞职的打算。</p><p>9月底，正式辞职，也就是9月底，收到猪八戒网的面试邀请，所以在家认真准备。面试非常愉快，面试官当场给我发了offer。由于猪八戒网在重庆还是很不错的公司，所以签约。</p><p>签约之后，是明年7月报道，可以提前实习。由于想在这段时间提升下自己和锻炼身体，所以没有去实习。在彻彻底底休息了一个月后，开始阅读和学习，之后搭建了博客。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这年，和女朋友在一起两年了，用实习工资把我的Xperia Z3换成了小米8，从水王、女流等主播那里收获了很多，喜欢上了阅读，找到了工作。</p><p>感觉自己在逐年提升，喜欢这个变化的过程，就像悉达多一样，经历，热爱。</p><p>2018年，很平常。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几天把之前记的Maven笔记整理出来，之前也在学习Mybatis框架，可能会整理出文章来。&lt;/p&gt;
&lt;p&gt;最近几天，在V2EX上看见有人讨
      
    
    </summary>
    
      <category term="随笔" scheme="https://bigbilii.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="总结" scheme="https://bigbilii.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Maven依赖、聚合与继承</title>
    <link href="https://bigbilii.github.io/2018/12/24/Maven%E4%BE%9D%E8%B5%96%E3%80%81%E8%81%9A%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
    <id>https://bigbilii.github.io/2018/12/24/Maven依赖、聚合与继承/</id>
    <published>2018-12-24T10:10:34.000Z</published>
    <updated>2018-12-24T11:27:19.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖机制"><a href="#依赖机制" class="headerlink" title="依赖机制"></a>依赖机制</h2><p>依赖管理是Maven的核心机制。可以管理数百个模块组成的多模块项目和应用程序的依赖关系。</p><blockquote><p>Maven通过定义良好的ClassPath和library version，在定义、创建和维护可重现的构建方面提供大量帮助。</p></blockquote><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p>依赖范围用于限制依赖关系的传递性，还用与各种构建任务的classpath。</p><blockquote><p>Maven定义了三个classpath：编译、测试、运行</p></blockquote><p>scope标签控制依赖与classpath的关系</p><ul><li>compile：默认范围，对于编译、测试和运行三种classpath都有效。这些依赖项将传播到依赖项目。</li><li>provided：与<code>compile</code>很相似，但表示你希望JDK或容器运行时提供依赖关系。例如servlet-api。对于编译、测试的classpath有效，但对于运行无效，并且不可传递</li><li>runtime：对于运行和测试的classpath有效，编译无效。例如jdbc驱动。</li><li>test：对于测试classpath有效，对于编译和运行阶段无效，不具有传递性。</li><li>system：与<code>provided</code>相似，只是必须提供明确包含它的JAR，通过<code>systemPath</code>标签指出路径。</li><li>import：只能作用于<code>&lt;dependencyManagement&gt;</code>部分中的<code>pom</code>类型的依赖项。它用来替换依赖列表里的依赖项，不参与限制依赖的传递性。</li></ul><h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><p>如果A项目依赖B项目，B项目依赖C项目，则形成了依赖传递，这样A项目也依赖C项目。</p><p>如果A项目不想依赖C项目，则在<code>&lt;exlusions&gt;</code>加入<code>&lt;exlusion&gt;</code>标签，标记C的坐标即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.1&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;jline&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jline&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>在依赖中，依赖了同一个包的两个版本，则Maven根据<strong>短路优先</strong>原则参数依赖。</p><h3 id="短路优先"><a href="#短路优先" class="headerlink" title="短路优先"></a>短路优先</h3><p>假设A项目中的依赖关系里，又两个X版本，依赖关系如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A-&gt;B-&gt;C-&gt;X(jar)</span><br><span class="line">A-&gt;D-&gt;X(jar)</span><br></pre></td></tr></table></figure><p>则会选择短的路径，即第二条。<br>如果路径相同，则先生命优先。</p><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>如果想一次构建多个项目模块，则可以对多个项目模块进行聚合。</p><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;模块一&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;模块二&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;模块三&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>为了消除重复，可以把配置信息提出。</p><p>如果需要继承某个项目，则在<code>&lt;parent&gt;</code>标签中添加父模块坐标（有必要时需要添加实际路径）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;公司名&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;项目名&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;版本&lt;/version&gt;</span><br><span class="line">    &lt;relativePath&gt;实际路径&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure><p>子模块继承了父模块的大量元素，但注意下面几项不会被继承</p><ul><li>artifactId</li><li>name</li><li>prerequisites</li></ul><h3 id="dependencyManagement"><a href="#dependencyManagement" class="headerlink" title="dependencyManagement"></a>dependencyManagement</h3><p>由于子模块会继承父模块的全部依赖，为了方便子模块继承，父模块可以采用<code>&lt;dependencyManagement&gt;</code>进行管理，这样子模块就可以选择需要继承的依赖，不用全部继承依赖了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;    </span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" target="_blank" rel="noopener">Maven依赖管理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;依赖机制&quot;&gt;&lt;a href=&quot;#依赖机制&quot; class=&quot;headerlink&quot; title=&quot;依赖机制&quot;&gt;&lt;/a&gt;依赖机制&lt;/h2&gt;&lt;p&gt;依赖管理是Maven的核心机制。可以管理数百个模块组成的多模块项目和应用程序的依赖关系。&lt;/p&gt;
&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="Maven" scheme="https://bigbilii.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://bigbilii.github.io/tags/Maven/"/>
    
      <category term="依赖" scheme="https://bigbilii.github.io/tags/%E4%BE%9D%E8%B5%96/"/>
    
  </entry>
  
  <entry>
    <title>Maven-pom常用元素</title>
    <link href="https://bigbilii.github.io/2018/12/21/Maven-pom%E5%B8%B8%E7%94%A8%E5%85%83%E7%B4%A0/"/>
    <id>https://bigbilii.github.io/2018/12/21/Maven-pom常用元素/</id>
    <published>2018-12-21T03:01:11.000Z</published>
    <updated>2018-12-21T03:46:42.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次主要是对pom文件的一个解析，<code>pom.xml</code>文件作为项目对象模型，通过xml来表示一个Maven项目，是Maven的核心。</p><h2 id="常用元素"><a href="#常用元素" class="headerlink" title="常用元素"></a>常用元素</h2><p>下面就主要对pom的常用元素进行解析。</p><p>其中，有些依赖、模块、继承等将在接下来的文章中介绍。</p><p>随不是完全对pom文件进行解析，但也是我在平时开发中常用到的一些元素，对下面元素有了深入了解，能够对付日常开发中的大部分问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 标识xml文件版本号和编码方式 --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- pom文件的根元素，主要声明了命名空间和xsd元素 --&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 所使用的object model版本，为了确保稳定的使用，这个元素是强制性的 --&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 坐标信息 --&gt;</span><br><span class="line">    &lt;!-- 项目创建团体或组织的唯一标识符，通常为域名反写 --&gt;</span><br><span class="line">    &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">    &lt;!-- 项目的名字，通常为项目名+模块名 --&gt;</span><br><span class="line">    &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">    &lt;!-- 版本号 --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        第一个0表示大版本号</span><br><span class="line">        第二个0表示分支版本号</span><br><span class="line">        第三个0标识小版本号</span><br><span class="line">        0.0.1-SNAPSHOT</span><br><span class="line">        snapshot快照</span><br><span class="line">        alpha内测</span><br><span class="line">        beta公测</span><br><span class="line">        Release稳定</span><br><span class="line">        GA正式发布</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;version&gt;&lt;/version&gt;</span><br><span class="line">    &lt;!-- 打包方式，默认为jar --&gt;</span><br><span class="line">    &lt;packaging&gt;&lt;/packaging&gt;</span><br><span class="line">    &lt;!-- END --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 用于Maven生成的文档中 --&gt;</span><br><span class="line">    &lt;!-- 项目的展示名--&gt;</span><br><span class="line">    &lt;name&gt;&lt;/name&gt;</span><br><span class="line">    &lt;!-- 项目的地址 --&gt;</span><br><span class="line">    &lt;url&gt;&lt;/url&gt;</span><br><span class="line">    &lt;!-- 项目描述 --&gt;</span><br><span class="line">    &lt;description&gt;&lt;/description&gt;</span><br><span class="line">    &lt;!-- 开发人员列表 --&gt;</span><br><span class="line">    &lt;developers&gt;&lt;/developers&gt;</span><br><span class="line">    &lt;!-- 许可证信息 --&gt;</span><br><span class="line">    &lt;license&gt;&lt;/license&gt;</span><br><span class="line">    &lt;!-- 组织信息 --&gt;</span><br><span class="line">    &lt;organization&gt;&lt;/organization&gt;</span><br><span class="line">    &lt;!-- END --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 属性定义 --&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- 项目编码 --&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 编译JDK版本 --&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 自定义属性 --&gt;</span><br><span class="line">        &lt;slf4j.version&gt;1.7.18&lt;/slf4j.version&gt;</span><br><span class="line">        &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 依赖列表 --&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- 依赖项 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;!-- 项目坐标 --&gt;</span><br><span class="line">            &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;&lt;/version&gt;</span><br><span class="line">            &lt;!-- 依赖范围 --&gt;</span><br><span class="line">            &lt;scope&gt;&lt;/scope&gt;</span><br><span class="line">            &lt;!-- 设置依赖是否可选 --&gt;</span><br><span class="line">            &lt;optional&gt;&lt;/optional&gt;</span><br><span class="line">            &lt;!--排除依赖传递列表 --&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;&lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">            &lt;!-- END --&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 构建行为配置 --&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;!-- 插件管理 --&gt;</span><br><span class="line">        &lt;pluginManagement&gt;</span><br><span class="line">            &lt;!-- 插件列表 --&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!-- 插件 --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;!-- 坐标 --&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">            &lt;/plugins&gt;</span><br><span class="line">        &lt;/pluginManagement&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 父模块继承 --&gt;</span><br><span class="line">    &lt;parent&gt;&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 多模块聚合 --&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这次主要是对pom文件的一个解析，&lt;code&gt;pom.xml&lt;/code&gt;文件作为项目对象模型，通过xml来表示一个Maven项目，是Mav
      
    
    </summary>
    
      <category term="Maven" scheme="https://bigbilii.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://bigbilii.github.io/tags/Maven/"/>
    
      <category term="Pom" scheme="https://bigbilii.github.io/tags/Pom/"/>
    
  </entry>
  
  <entry>
    <title>Maven的生命周期</title>
    <link href="https://bigbilii.github.io/2018/12/20/Maven%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://bigbilii.github.io/2018/12/20/Maven的生命周期/</id>
    <published>2018-12-20T01:33:47.000Z</published>
    <updated>2018-12-20T02:32:46.325Z</updated>
    
    <content type="html"><![CDATA[<p>Maven的功能之一是完成项目构建，而一个完整的项目构建过程包括：清理、编译、测试、打包、集成测试、验证、部署。所以Maven的生命周期中，概括了一个完整的项目构建过程。</p><h2 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h2><h3 id="构建生命周期的几个阶段"><a href="#构建生命周期的几个阶段" class="headerlink" title="构建生命周期的几个阶段"></a>构建生命周期的几个阶段</h3><p>Maven中有三个内置的构建生命周期，clean、default、site。</p><ul><li>clean 清理项目<ul><li>pre-clean 执行清理前的工作</li><li>clean 清理上次构建生成的所有工作</li><li>post-clean 执行清理后的工作</li></ul></li><li>default 构建项目（核心）<ul><li>常用的有compile、test、package、install</li></ul></li><li>site 生成项目站点<ul><li>pre-site 在生成项目站点之前要完成的工作</li><li>site 生成项目的站点文档</li><li>post-site 在生成项目站点后要完成的工作</li><li>site-deploy 发布生成站点到服务器上</li></ul></li></ul><p>生命周期的顺序是依次执行的，执行后面的步骤，会先去执行之前的步骤。</p><p><em>完整的生命周期列表，请参考<a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference" target="_blank" rel="noopener">Maven生命周期参考</a></em></p><h3 id="某些阶段通常不会在命令行调用"><a href="#某些阶段通常不会在命令行调用" class="headerlink" title="某些阶段通常不会在命令行调用"></a>某些阶段通常不会在命令行调用</h3><p>以连字符（pre-<em>，post-</em>，process-*）命名的阶段通常不会在命令行直接调用。这些阶段对构建进行排序，产生在构建之外无用的中间结果。比如在执行<code>integration-test</code>时，环境可能处于挂机状态。</p><h2 id="设置项目"><a href="#设置项目" class="headerlink" title="设置项目"></a>设置项目</h2><p>在项目构建Maven构建时，如何给每个构建阶段分配任务？</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>常用的方法时在POM元素<code>packaging</code>为项目设置打包。如<code>jar</code>，<code>war</code>，<code>ear</code>和<code>pom</code>，如果未设置，则默认为<code>jar</code>。</p><p>每个打包方式都包含一个绑定到特定阶段的目标列表。比如，<code>jar</code>打包的默认构建生命周期的阶段的绑定列表如下。</p><table><thead><tr><th>Phase</th><th>plugin:goal</th></tr></thead><tbody><tr><td>process-resources</td><td>resources:resources</td></tr><tr><td>compile</td><td>compiler:compile</td></tr><tr><td>process-test-resources</td><td>resources:testResources</td></tr><tr><td>test-compile</td><td>compiler:testCompile</td></tr><tr><td>test</td><td>surefire:test</td></tr><tr><td>package</td><td>jar:jar</td></tr><tr><td>install</td><td>install:install</td></tr><tr><td>deploy</td><td>deploy:deploy</td></tr></tbody></table><p><em>参考<a href="https://maven.apache.org/ref/3.6.0/maven-core/default-bindings.html" target="_blank" rel="noopener">标准绑定集</a></em></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>可以通过添加插件的方式向项目中添加目标。插件也就是Maven提供目标的工具，每个插件的功能不同，具体可从<a href="https://maven.apache.org/plugins/index.html" target="_blank" rel="noopener">官网</a>查看。</p><p>比如，如果想生成Java源码，则可以使用Modello插件，将<code>modello:java</code>绑定到<code>generate-sources</code>阶段。则可以在POM文件中<code>&lt;build&gt;</code>的<code>&lt;plugins&gt;</code>部分插入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> &lt;plugin&gt;</span><br><span class="line">   &lt;groupId&gt;org.codehaus.modello&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;modello-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.8.1&lt;/version&gt;</span><br><span class="line">   &lt;executions&gt;</span><br><span class="line">     &lt;execution&gt;</span><br><span class="line">       &lt;configuration&gt;</span><br><span class="line">         &lt;models&gt;</span><br><span class="line">           &lt;model&gt;src/main/mdo/maven.mdo&lt;/model&gt;</span><br><span class="line">         &lt;/models&gt;</span><br><span class="line">         &lt;version&gt;4.0.0&lt;/version&gt;</span><br><span class="line">       &lt;/configuration&gt;</span><br><span class="line">       &lt;goals&gt;</span><br><span class="line">         &lt;goal&gt;java&lt;/goal&gt;</span><br><span class="line">       &lt;/goals&gt;</span><br><span class="line">     &lt;/execution&gt;</span><br><span class="line">   &lt;/executions&gt;</span><br><span class="line"> &lt;/plugin&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maven的功能之一是完成项目构建，而一个完整的项目构建过程包括：清理、编译、测试、打包、集成测试、验证、部署。所以Maven的生命周期中，概括了一个完整的项目构建过程。&lt;/p&gt;
&lt;h2 id=&quot;Maven生命周期&quot;&gt;&lt;a href=&quot;#Maven生命周期&quot; class=&quot;
      
    
    </summary>
    
      <category term="Maven" scheme="https://bigbilii.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://bigbilii.github.io/tags/Maven/"/>
    
      <category term="生命周期" scheme="https://bigbilii.github.io/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>Maven中的坐标、仓库</title>
    <link href="https://bigbilii.github.io/2018/12/18/Maven%E4%B8%AD%E7%9A%84%E5%9D%90%E6%A0%87%E3%80%81%E4%BB%93%E5%BA%93/"/>
    <id>https://bigbilii.github.io/2018/12/18/Maven中的坐标、仓库/</id>
    <published>2018-12-18T11:08:47.000Z</published>
    <updated>2018-12-18T12:05:01.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><p>在Maven中，任何一个插件、项目输出都可以被称之为<strong>构建</strong>，所有构建都通过<strong>坐标</strong>作为其<strong>唯一标识</strong>。</p><p>大致由下面五个元素构成：</p><ul><li>groupId：一般为公司或组织的逆向域名。</li><li>artifactId：一般为项目名称+模块名称。</li><li>version：当前该Maven项目的版本。</li><li>packaging：Maven项目的打包方式，默认是jar，也可以打包成war, ear等。</li><li>classifier：定义一些附件，更加细化的后缀，用来定义比如源码、文档、x86版本、ios版本等。</li></ul><p>前三个是必须定义，后两个视情况而定。</p><p>总之，每一个元素坐标，都是为了准确的找到一个构建而设定的。</p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>Maven中的仓库，用来存放构建，分为<strong>本地仓库</strong>和<strong>远程仓库</strong></p><p>如果在所依赖的构建在本地仓库中没有查找到，则会去远程仓库(默认为<a href="https://mvnrepository.com/" target="_blank" rel="noopener">maven远程中央仓库</a>)中下载。</p><h3 id="修改本地仓库"><a href="#修改本地仓库" class="headerlink" title="修改本地仓库"></a>修改本地仓库</h3><p>在安装目录下的<code>conf</code>文件夹中，打开<code>settings.xml</code>文件。找到<code>localRepository</code>，在3.6.0版本中，会有下面一段注解，意思就是本地仓库默认在<code>${user.home}/.m2/repository</code>下，如果需要修改，则添加<code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code>这个标签，里面的值为你设置的本地仓库路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- localRepository</span><br><span class="line">  | The path to the local repository maven will use to store artifacts.</span><br><span class="line">  |</span><br><span class="line">  | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="line"> &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="line"> --&gt;</span><br><span class="line">   &lt;localRepository&gt;你的本地仓库路径&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><h3 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h3><p>由于maven的中央仓库设置在国外，访问和下载速度很慢，则可以设置一个国内的镜像仓库，这样就能直接从国内的镜像仓库中下载所需要的构建了。</p><p>在安装目录下的<code>conf</code>文件夹中，打开<code>settings.xml</code>文件。找到<code>mirrors</code>，添加相应内容即可。</p><p>镜像仓库就相当于个拦截器，它会拦截maven对远程仓库的请求，将请求的地址重定向到<code>&lt;url&gt;</code>标签所配置的地址，所拦截的范围为<code>&lt;mirrorOf&gt;</code>标签所配置的内容，拦截范围内容为<strong>仓库ID</strong>，可设置多个，用 <code>,</code> 隔开，也可以用 <code>!</code> 设置不用拦截仓库id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;!-- mirror</span><br><span class="line">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="line">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span><br><span class="line">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="line">     |</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;mirrorId&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;!-- 阿里云镜像 --&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">  &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;坐标&quot;&gt;&lt;a href=&quot;#坐标&quot; class=&quot;headerlink&quot; title=&quot;坐标&quot;&gt;&lt;/a&gt;坐标&lt;/h2&gt;&lt;p&gt;在Maven中，任何一个插件、项目输出都可以被称之为&lt;strong&gt;构建&lt;/strong&gt;，所有构建都通过&lt;strong&gt;坐标&lt;/stron
      
    
    </summary>
    
      <category term="Maven" scheme="https://bigbilii.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://bigbilii.github.io/tags/Maven/"/>
    
      <category term="仓库" scheme="https://bigbilii.github.io/tags/%E4%BB%93%E5%BA%93/"/>
    
      <category term="镜像" scheme="https://bigbilii.github.io/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="坐标" scheme="https://bigbilii.github.io/tags/%E5%9D%90%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>Maven入门</title>
    <link href="https://bigbilii.github.io/2018/12/16/Maven%E5%85%A5%E9%97%A8/"/>
    <id>https://bigbilii.github.io/2018/12/16/Maven入门/</id>
    <published>2018-12-16T06:44:31.000Z</published>
    <updated>2018-12-16T07:30:35.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>Maven是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本次将在windows环境下搭建maven环境。</p><p><strong>注意：环境中需要配置JDK</strong></p><h3 id="下载Maven"><a href="#下载Maven" class="headerlink" title="下载Maven"></a>下载Maven</h3><p>访问<a href="http://maven.apache.org/" target="_blank" rel="noopener">Maven官网</a>,下载你所需要的版本，一般情况下，下载已编译的版本，然后解压到相应的安装目录下。</p><p>目录结构介绍：</p><ul><li>bin：包含mvn的运行脚本</li><li>boot：一个类加载器的框架</li><li>conf：配置文件目录</li><li>lib：mvn平时所用的类库</li></ul><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>下载解压安装好之后，需要进行环境变量的配置，以便在任何路径下都能执行mvn的相应运行脚本。</p><p>打开环境变量，编辑系统变量（如果此电脑由多用户使用，则编辑用户变量）</p><p>新建，变量名M2_HOME，变量值为maven的安装目录，确定。</p><p>编辑Path，增加<code>%M2_HOME%\bin;</code>，确定。</p><p>配置成功，打开命令行，输入<code>mvn -v</code>可以查看到maven的版本，Java信息和系统信息。</p><p><em>打开环境变量步骤：电脑邮件-属性-高级系统设置-环境变量。</em><br><em>安装目录下最好不要有中文路径，以避免不必要的问题。</em></p><h2 id="Maven目录结构"><a href="#Maven目录结构" class="headerlink" title="Maven目录结构"></a>Maven目录结构</h2><p>良好的目录结构，有助于开发人员理解项目，也能更好的维护项目。</p><p>一般的Maven项目目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|--pom.xml //项目对象模型配置文件</span><br><span class="line">|--src</span><br><span class="line">    |--main</span><br><span class="line">        |--java //源代码</span><br><span class="line">            `package</span><br><span class="line">        |--resources //资源文件</span><br><span class="line">    |--test</span><br><span class="line">        |--java //测试代码</span><br><span class="line">            `package</span><br><span class="line">        |--resources //测试资源文件</span><br></pre></td></tr></table></figure><h2 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn -v      //查看maven版本</span><br><span class="line">mvm compile //编译</span><br><span class="line">mvn test    //测试</span><br><span class="line">mvn package //打包</span><br><span class="line">mvn clean   //删除target</span><br><span class="line">mvn install //安装jar包到本地仓库</span><br></pre></td></tr></table></figure><p>创建目录的两种方式</p><ul><li>arhetype:gennerate //按照提示进行选择</li><li>arhetype:gennerate <pre><code>-DgroupId=组织名，公司网址反写-DartifactId=项目名-模块名-Dversion=版本号-Dversion=版本号-Dpackage=代码存在的包名</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h2&gt;&lt;p&gt;Maven是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。&lt;/p
      
    
    </summary>
    
      <category term="Maven" scheme="https://bigbilii.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://bigbilii.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题NexT配置</title>
    <link href="https://bigbilii.github.io/2018/12/10/Hexo%E4%B8%BB%E9%A2%98NexT%E9%85%8D%E7%BD%AE/"/>
    <id>https://bigbilii.github.io/2018/12/10/Hexo主题NexT配置/</id>
    <published>2018-12-10T12:37:09.000Z</published>
    <updated>2018-12-10T14:06:45.986Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://bigbilii.github.io/2018/12/05/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">上篇博客</a>配置了Hexo，今天这篇文章，将介绍Hexo配置NexT主题的配置。</p><h2 id="NexT主题下载与启动"><a href="#NexT主题下载与启动" class="headerlink" title="NexT主题下载与启动"></a>NexT主题下载与启动</h2><p>使用git，克隆最新版本，下载到<code>/themes</code>目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd username.github.io</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>下载好之后，打开站点配置文件(/_config.yml),找到<code>theme</code>字段，将值改为next。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>重新启动hexo站点，即可看到主题改变。</p><p><em>注：配置其他主题也是一样的步骤</em></p><p><em>注：如果没有看到主题改变，清理下缓存，使用hexo clean命令，再重试</em></p><h2 id="配置站点配置文件"><a href="#配置站点配置文件" class="headerlink" title="配置站点配置文件"></a>配置站点配置文件</h2><p>站点配置文件在根目录下的<code>_congif.yml</code></p><h3 id="站点信息设置"><a href="#站点信息设置" class="headerlink" title="站点信息设置"></a>站点信息设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: #站点名称</span><br><span class="line">subtitle: #副标题</span><br><span class="line">description: #站点描述</span><br><span class="line">author: #昵称</span><br><span class="line">language: #语言设置</span><br></pre></td></tr></table></figure><p>注意：NexT主题中，language配置有相应的配置信息。</p><blockquote><table><thead><tr><th>语言</th><th style="text-align:right">代码</th><th style="text-align:center">设定示例</th></tr></thead><tbody><tr><td>English</td><td style="text-align:right">en</td><td style="text-align:center">language: en</td></tr><tr><td>简体中文</td><td style="text-align:right">zh-Hans</td><td style="text-align:center">language: zh-Hans</td></tr><tr><td>Français</td><td style="text-align:right">fr-FR</td><td style="text-align:center">language: fr-FR</td></tr><tr><td>Português</td><td style="text-align:right">pt</td><td style="text-align:center">language: pt or language: pt-BR</td></tr><tr><td>繁體中文</td><td style="text-align:right">zh-hk 或者 zh-tw</td><td style="text-align:center">language: zh-hk</td></tr><tr><td>Русский</td><td style="text-align:right">язык    ru</td><td style="text-align:center">language: ru</td></tr><tr><td>Deutsch</td><td style="text-align:right">de</td><td style="text-align:center">language: de</td></tr><tr><td>日本語</td><td style="text-align:right">ja</td><td style="text-align:center">language: ja</td></tr><tr><td>Indonesian</td><td style="text-align:right">id</td><td style="text-align:center">language: id</td></tr><tr><td>Korean</td><td style="text-align:right">ko</td><td style="text-align:center">language: ko</td></tr></tbody></table></blockquote><h2 id="配置主题配置文件"><a href="#配置主题配置文件" class="headerlink" title="配置主题配置文件"></a>配置主题配置文件</h2><p>主题配置文件在主题目录下的<code>/themes/next/_congif.yml</code></p><h3 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h3><p>Scheme是NexT提供的一种特性，借助于Scheme，NexT为你提供多种不同的外观。</p><p>取消想要使用的效果前面的<code>#</code>注释，即可开启，，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line"># scheme: Mist</span><br><span class="line"># scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure></p><h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>通过配置menu标签，来设置网址的菜单选项。</p><p>用法：key: link || icon</p><p>key为菜单项名称，如果在配置的language中翻译项能找到对应翻译，则使用翻译，如果不能找到，则使用key。</p><p>link为菜单的链接。</p><p>icon为FontAwesome图标的名称，如果不配置，则默认使用问题图标。</p><p>menu_icons配置是否使用icon。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Menu Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p><p><em>注：如果站点在子目录下运行，则link的最前面的/删除。</em></p><p><em>注：默认菜单项为上面列出的，只有home和archives不需要手动创建，其他均需要手动创建。</em></p><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>修改<code>avatar</code>字段，值为头像链接，链接可以为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"> http://example.com/avatar.png</span><br></pre></td></tr></table></figure></p><blockquote><table><thead><tr><th>地址</th><th>值</th></tr></thead><tbody><tr><td>完整的互联网 URI</td><td><a href="http://example.com/avatar.png" target="_blank" rel="noopener">http://example.com/avatar.png</a></td></tr><tr><td>站点内的地址</td><td>将头像放置主题目录下的 source/uploads/ （新建 uploads 目录若不存在） 配置为：avatar: /uploads/avatar.png 或者 放置在 source/images/ 目录下 配置为：avatar: /images/avatar.png</td></tr></tbody></table></blockquote><h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><p>这个时间将在站点的底部显示，例如 ©2018。 编辑主题配置文件，新增字段since。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">since: 2018</span><br></pre></td></tr></table></figure><h2 id="Valine评论"><a href="#Valine评论" class="headerlink" title="Valine评论"></a>Valine评论</h2><h3 id="配置leancloud"><a href="#配置leancloud" class="headerlink" title="配置leancloud"></a>配置leancloud</h3><p>Valine需要运行在leancloud上，所以需要<a href="https://leancloud.cn/" target="_blank" rel="noopener">注册</a>其账号，创建一个应用（名字随意），进入应用，设置，应用Key，找到App ID和App Key。</p><h3 id="配置NexT主题配置文件"><a href="#配置NexT主题配置文件" class="headerlink" title="配置NexT主题配置文件"></a>配置NexT主题配置文件</h3><p>打开主题配置文件（/themes/_config.yml），找到Valine标签（没有可自行添加），配置如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: #上面的appid</span><br><span class="line">  appkey:  #上面的appkey</span><br><span class="line">  notify: false # mail notifier , https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: 欢迎评论 # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  guest_info: nick,mail # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure></p><h2 id="阅读次数统计（LeanCloud"><a href="#阅读次数统计（LeanCloud" class="headerlink" title="阅读次数统计（LeanCloud)"></a>阅读次数统计（LeanCloud)</h2><h3 id="配置leancloud-1"><a href="#配置leancloud-1" class="headerlink" title="配置leancloud"></a>配置leancloud</h3><p>在配置Valine评论系统的时候，已经拥有了leancloud账号，如果没有，则可以跳转上去查看。</p><p>创建应用(名字随意）点击左侧右上角的齿轮图标，新建Class：<strong>此处的新建Class名字必须为Counter。</strong></p><blockquote><p>由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择无限制。</p></blockquote><p>与valine上述一样，获取该应用的App ID和App Key。</p><h3 id="配置NexT主题配置文件-1"><a href="#配置NexT主题配置文件-1" class="headerlink" title="配置NexT主题配置文件"></a>配置NexT主题配置文件</h3><p>打开主题配置文件（/themes/next/_config.yml），找到leancloud_visitors标签（没有可自行添加），配置如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: #上面的appid</span><br><span class="line">  app_key: #上面的appkey</span><br></pre></td></tr></table></figure></p><h2 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p><h3 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h3><p>在<code>/config.yml</code>中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p><h3 id="配置主题信息"><a href="#配置主题信息" class="headerlink" title="配置主题信息"></a>配置主题信息</h3><p>在<code>/themes/next/config.yml</code>中,启动本地搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://bigbilii.github.io/2018/12/05/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/&quot;&gt;上篇博客&lt;/a&gt;配置了Hexo，今天这篇文章，将介绍Hexo配置NexT主题的配
      
    
    </summary>
    
      <category term="博客" scheme="https://bigbilii.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://bigbilii.github.io/tags/hexo/"/>
    
      <category term="NexT" scheme="https://bigbilii.github.io/tags/NexT/"/>
    
      <category term="博客" scheme="https://bigbilii.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github博客搭建</title>
    <link href="https://bigbilii.github.io/2018/12/05/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://bigbilii.github.io/2018/12/05/Hexo-Github博客搭建/</id>
    <published>2018-12-05T08:22:31.000Z</published>
    <updated>2018-12-05T09:07:01.984Z</updated>
    
    <content type="html"><![CDATA[<p>hexo是快速、简洁且高效的博客框架，本文章介绍如何利用hexo+github搭建出一个静态博客网站。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><p>在<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a>下载你相应环境的node.js，根据提示进行安装。</p><p>检验安装完成：</p><p><code>$ node -v</code></p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>在<a href="https://gitforwindows.org/" target="_blank" rel="noopener">官网</a>下载相应环境的git，根据提示安装。</p><p>安装成功后，配置相应的账号和邮箱。（这里需要github账号）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;username&quot;</span><br><span class="line">$ git config --global user.email username@gmail.com</span><br></pre></td></tr></table></figure><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>安装node.js之后，根据<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a>的提示，安装hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h2><h3 id="创建博客目录"><a href="#创建博客目录" class="headerlink" title="创建博客目录"></a>创建博客目录</h3><p>上面三个环境搭建好之后，在本地的终端中，进入某个路径，在该路径下建立博客目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init username.github.io</span><br><span class="line">$ cd username.github.io</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="生成静态页面并运行"><a href="#生成静态页面并运行" class="headerlink" title="生成静态页面并运行"></a>生成静态页面并运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><blockquote><p>g 即generate<br>s 即server</p></blockquote><p>在浏览器中，输入地址 <strong>localhost:4000</strong> 即可看到效果。</p><p>这样一个本地的hexo博客系统以及搭建好了。</p><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><h3 id="创建一个username-github-io的public仓库"><a href="#创建一个username-github-io的public仓库" class="headerlink" title="创建一个username.github.io的public仓库"></a>创建一个username.github.io的public仓库</h3><p>创建一个仓库，根据你的github的username来创建一个public的仓库，仓库名为<strong>username.github.io</strong></p><h3 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><p>在本地<strong>站点配置文件的</strong>：<strong>_config.yml </strong>文件中配置deploy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>这样就能在username.github.com中看到你的博客系统了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hexo是快速、简洁且高效的博客框架，本文章介绍如何利用hexo+github搭建出一个静态博客网站。&lt;/p&gt;
&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;h3 id
      
    
    </summary>
    
      <category term="博客" scheme="https://bigbilii.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://bigbilii.github.io/tags/hexo/"/>
    
      <category term="博客" scheme="https://bigbilii.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github" scheme="https://bigbilii.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>起于年末的片头</title>
    <link href="https://bigbilii.github.io/2018/12/04/%E8%B5%B7%E4%BA%8E%E5%B9%B4%E6%9C%AB%E7%9A%84%E7%89%87%E5%A4%B4/"/>
    <id>https://bigbilii.github.io/2018/12/04/起于年末的片头/</id>
    <published>2018-12-04T14:40:01.000Z</published>
    <updated>2018-12-04T14:40:37.560Z</updated>
    
    <content type="html"><![CDATA[<p>今日，2018年12月4日，是2018年的结束，是我的开始。</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>我，今年23岁，现目前就读于重庆理工大学，计算机科学与技术专业，大四上半学期。在今年暑假加入某gis公司实习，秋招的时候，顺利收到猪八戒网的Java开发offer。</p><p>在过去的很多年内，有很多想法，做过动漫视频剪辑，做过博客，跑步，摄影，看书。但几乎都是做了头两次，但没有坚持，原因就是，当把这些所谓的兴趣和想法，以质量的形式来衡量，就失去了做下去的动力。也就是说，当我想把某件事做好，那么需要很多精力和时间去做这件事，这件事就不再使我快乐，成为了我的负担，也就作罢。</p><p>当现目前我有了足够多的时间，距离明年工作报道还有半年多的时间，这使我重拾了以前的兴趣之一，博客。</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>现目前的我，是一名计算机专业的学生，和其他程序员一样，热爱着技术和科技。</p><p>目前是一名Java开发者，手头也有一些Java相关的技术书籍，掌握了Java基础，Web开发和Spring等相关框架的使用，在实习的时候也学习了Mongodb、Elasticsearch等的使用，在学校也学习了前端，C语言，算法，Andorid，计算机系统，单片机，计算机网络等课程，取得了软件设计师（软考中级），OCJP认证。</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>时间，是我现在所富裕的。所以我得好好计划下接下来的时间安排。</p><p>在接下来的时间，我有几个计划</p><ol><li>坚持学习技术，记笔记，更新博客</li><li>每周跑步两次，锻炼身体，保护头发</li><li>坚持看书（非技术类），增长知识，方便吹b</li><li>在明年年后，租到适合的房子</li></ol><p>不过，现目前还在大学，还有最后的毕业设计要做，等待开题中，等完成了就彻底轻松了，可以出去旅游旅游。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日，2018年12月4日，是2018年的结束，是我的开始。&lt;/p&gt;
&lt;h2 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h2&gt;&lt;p&gt;我，今年23岁，现目前就读于重庆理工大学，计算机科学与技术专业，
      
    
    </summary>
    
      <category term="随笔" scheme="https://bigbilii.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://bigbilii.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="生活" scheme="https://bigbilii.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
