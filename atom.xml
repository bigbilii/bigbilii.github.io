<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郭鑫的个人博客</title>
  
  <subtitle>热爱技术 | 热爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://bigbilii.github.io/"/>
  <updated>2018-12-24T11:27:19.627Z</updated>
  <id>https://bigbilii.github.io/</id>
  
  <author>
    <name>Guo Xin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven依赖、聚合与继承</title>
    <link href="https://bigbilii.github.io/2018/12/24/Maven%E4%BE%9D%E8%B5%96%E3%80%81%E8%81%9A%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
    <id>https://bigbilii.github.io/2018/12/24/Maven依赖、聚合与继承/</id>
    <published>2018-12-24T10:10:34.000Z</published>
    <updated>2018-12-24T11:27:19.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖机制"><a href="#依赖机制" class="headerlink" title="依赖机制"></a>依赖机制</h2><p>依赖管理是Maven的核心机制。可以管理数百个模块组成的多模块项目和应用程序的依赖关系。</p><blockquote><p>Maven通过定义良好的ClassPath和library version，在定义、创建和维护可重现的构建方面提供大量帮助。</p></blockquote><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p>依赖范围用于限制依赖关系的传递性，还用与各种构建任务的classpath。</p><blockquote><p>Maven定义了三个classpath：编译、测试、运行</p></blockquote><p>scope标签控制依赖与classpath的关系</p><ul><li>compile：默认范围，对于编译、测试和运行三种classpath都有效。这些依赖项将传播到依赖项目。</li><li>provided：与<code>compile</code>很相似，但表示你希望JDK或容器运行时提供依赖关系。例如servlet-api。对于编译、测试的classpath有效，但对于运行无效，并且不可传递</li><li>runtime：对于运行和测试的classpath有效，编译无效。例如jdbc驱动。</li><li>test：对于测试classpath有效，对于编译和运行阶段无效，不具有传递性。</li><li>system：与<code>provided</code>相似，只是必须提供明确包含它的JAR，通过<code>systemPath</code>标签指出路径。</li><li>import：只能作用于<code>&lt;dependencyManagement&gt;</code>部分中的<code>pom</code>类型的依赖项。它用来替换依赖列表里的依赖项，不参与限制依赖的传递性。</li></ul><h2 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h2><p>如果A项目依赖B项目，B项目依赖C项目，则形成了依赖传递，这样A项目也依赖C项目。</p><p>如果A项目不想依赖C项目，则在<code>&lt;exlusions&gt;</code>加入<code>&lt;exlusion&gt;</code>标签，标记C的坐标即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.1&lt;/version&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;jline&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jline&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h2><p>在依赖中，依赖了同一个包的两个版本，则Maven根据<strong>短路优先</strong>原则参数依赖。</p><h3 id="短路优先"><a href="#短路优先" class="headerlink" title="短路优先"></a>短路优先</h3><p>假设A项目中的依赖关系里，又两个X版本，依赖关系如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A-&gt;B-&gt;C-&gt;X(jar)</span><br><span class="line">A-&gt;D-&gt;X(jar)</span><br></pre></td></tr></table></figure><p>则会选择短的路径，即第二条。<br>如果路径相同，则先生命优先。</p><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>如果想一次构建多个项目模块，则可以对多个项目模块进行聚合。</p><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;模块一&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;模块二&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;模块三&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>为了消除重复，可以把配置信息提出。</p><p>如果需要继承某个项目，则在<code>&lt;parent&gt;</code>标签中添加父模块坐标（有必要时需要添加实际路径）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;公司名&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;项目名&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;版本&lt;/version&gt;</span><br><span class="line">    &lt;relativePath&gt;实际路径&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure><p>子模块继承了父模块的大量元素，但注意下面几项不会被继承</p><ul><li>artifactId</li><li>name</li><li>prerequisites</li></ul><h3 id="dependencyManagement"><a href="#dependencyManagement" class="headerlink" title="dependencyManagement"></a>dependencyManagement</h3><p>由于子模块会继承父模块的全部依赖，为了方便子模块继承，父模块可以采用<code>&lt;dependencyManagement&gt;</code>进行管理，这样子模块就可以选择需要继承的依赖，不用全部继承依赖了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;    </span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" target="_blank" rel="noopener">Maven依赖管理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;依赖机制&quot;&gt;&lt;a href=&quot;#依赖机制&quot; class=&quot;headerlink&quot; title=&quot;依赖机制&quot;&gt;&lt;/a&gt;依赖机制&lt;/h2&gt;&lt;p&gt;依赖管理是Maven的核心机制。可以管理数百个模块组成的多模块项目和应用程序的依赖关系。&lt;/p&gt;
&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="Maven" scheme="https://bigbilii.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://bigbilii.github.io/tags/Maven/"/>
    
      <category term="依赖" scheme="https://bigbilii.github.io/tags/%E4%BE%9D%E8%B5%96/"/>
    
  </entry>
  
  <entry>
    <title>Maven-pom常用元素</title>
    <link href="https://bigbilii.github.io/2018/12/21/Maven-pom%E5%B8%B8%E7%94%A8%E5%85%83%E7%B4%A0/"/>
    <id>https://bigbilii.github.io/2018/12/21/Maven-pom常用元素/</id>
    <published>2018-12-21T03:01:11.000Z</published>
    <updated>2018-12-21T03:46:42.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次主要是对pom文件的一个解析，<code>pom.xml</code>文件作为项目对象模型，通过xml来表示一个Maven项目，是Maven的核心。</p><h2 id="常用元素"><a href="#常用元素" class="headerlink" title="常用元素"></a>常用元素</h2><p>下面就主要对pom的常用元素进行解析。</p><p>其中，有些依赖、模块、继承等将在接下来的文章中介绍。</p><p>随不是完全对pom文件进行解析，但也是我在平时开发中常用到的一些元素，对下面元素有了深入了解，能够对付日常开发中的大部分问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 标识xml文件版本号和编码方式 --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- pom文件的根元素，主要声明了命名空间和xsd元素 --&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 所使用的object model版本，为了确保稳定的使用，这个元素是强制性的 --&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 坐标信息 --&gt;</span><br><span class="line">    &lt;!-- 项目创建团体或组织的唯一标识符，通常为域名反写 --&gt;</span><br><span class="line">    &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">    &lt;!-- 项目的名字，通常为项目名+模块名 --&gt;</span><br><span class="line">    &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">    &lt;!-- 版本号 --&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        第一个0表示大版本号</span><br><span class="line">        第二个0表示分支版本号</span><br><span class="line">        第三个0标识小版本号</span><br><span class="line">        0.0.1-SNAPSHOT</span><br><span class="line">        snapshot快照</span><br><span class="line">        alpha内测</span><br><span class="line">        beta公测</span><br><span class="line">        Release稳定</span><br><span class="line">        GA正式发布</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;version&gt;&lt;/version&gt;</span><br><span class="line">    &lt;!-- 打包方式，默认为jar --&gt;</span><br><span class="line">    &lt;packaging&gt;&lt;/packaging&gt;</span><br><span class="line">    &lt;!-- END --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 用于Maven生成的文档中 --&gt;</span><br><span class="line">    &lt;!-- 项目的展示名--&gt;</span><br><span class="line">    &lt;name&gt;&lt;/name&gt;</span><br><span class="line">    &lt;!-- 项目的地址 --&gt;</span><br><span class="line">    &lt;url&gt;&lt;/url&gt;</span><br><span class="line">    &lt;!-- 项目描述 --&gt;</span><br><span class="line">    &lt;description&gt;&lt;/description&gt;</span><br><span class="line">    &lt;!-- 开发人员列表 --&gt;</span><br><span class="line">    &lt;developers&gt;&lt;/developers&gt;</span><br><span class="line">    &lt;!-- 许可证信息 --&gt;</span><br><span class="line">    &lt;license&gt;&lt;/license&gt;</span><br><span class="line">    &lt;!-- 组织信息 --&gt;</span><br><span class="line">    &lt;organization&gt;&lt;/organization&gt;</span><br><span class="line">    &lt;!-- END --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 属性定义 --&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- 项目编码 --&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 编译JDK版本 --&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 自定义属性 --&gt;</span><br><span class="line">        &lt;slf4j.version&gt;1.7.18&lt;/slf4j.version&gt;</span><br><span class="line">        &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 依赖列表 --&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- 依赖项 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;!-- 项目坐标 --&gt;</span><br><span class="line">            &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;&lt;/version&gt;</span><br><span class="line">            &lt;!-- 依赖范围 --&gt;</span><br><span class="line">            &lt;scope&gt;&lt;/scope&gt;</span><br><span class="line">            &lt;!-- 设置依赖是否可选 --&gt;</span><br><span class="line">            &lt;optional&gt;&lt;/optional&gt;</span><br><span class="line">            &lt;!--排除依赖传递列表 --&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;&lt;/exclusion&gt;</span><br><span class="line">            &lt;/exclusions&gt;</span><br><span class="line">            &lt;!-- END --&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 构建行为配置 --&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;!-- 插件管理 --&gt;</span><br><span class="line">        &lt;pluginManagement&gt;</span><br><span class="line">            &lt;!-- 插件列表 --&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!-- 插件 --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;!-- 坐标 --&gt;</span><br><span class="line">                    &lt;artifactId&gt;maven-clean-plugin&lt;/artifactId&gt;</span><br><span class="line">                    &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">                &lt;/plugin&gt;</span><br><span class="line">            &lt;/plugins&gt;</span><br><span class="line">        &lt;/pluginManagement&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 父模块继承 --&gt;</span><br><span class="line">    &lt;parent&gt;&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 多模块聚合 --&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;&lt;/module&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这次主要是对pom文件的一个解析，&lt;code&gt;pom.xml&lt;/code&gt;文件作为项目对象模型，通过xml来表示一个Maven项目，是Mav
      
    
    </summary>
    
      <category term="Maven" scheme="https://bigbilii.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://bigbilii.github.io/tags/Maven/"/>
    
      <category term="Pom" scheme="https://bigbilii.github.io/tags/Pom/"/>
    
  </entry>
  
  <entry>
    <title>Maven的生命周期</title>
    <link href="https://bigbilii.github.io/2018/12/20/Maven%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://bigbilii.github.io/2018/12/20/Maven的生命周期/</id>
    <published>2018-12-20T01:33:47.000Z</published>
    <updated>2018-12-20T02:32:46.325Z</updated>
    
    <content type="html"><![CDATA[<p>Maven的功能之一是完成项目构建，而一个完整的项目构建过程包括：清理、编译、测试、打包、集成测试、验证、部署。所以Maven的生命周期中，概括了一个完整的项目构建过程。</p><h2 id="Maven生命周期"><a href="#Maven生命周期" class="headerlink" title="Maven生命周期"></a>Maven生命周期</h2><h3 id="构建生命周期的几个阶段"><a href="#构建生命周期的几个阶段" class="headerlink" title="构建生命周期的几个阶段"></a>构建生命周期的几个阶段</h3><p>Maven中有三个内置的构建生命周期，clean、default、site。</p><ul><li>clean 清理项目<ul><li>pre-clean 执行清理前的工作</li><li>clean 清理上次构建生成的所有工作</li><li>post-clean 执行清理后的工作</li></ul></li><li>default 构建项目（核心）<ul><li>常用的有compile、test、package、install</li></ul></li><li>site 生成项目站点<ul><li>pre-site 在生成项目站点之前要完成的工作</li><li>site 生成项目的站点文档</li><li>post-site 在生成项目站点后要完成的工作</li><li>site-deploy 发布生成站点到服务器上</li></ul></li></ul><p>生命周期的顺序是依次执行的，执行后面的步骤，会先去执行之前的步骤。</p><p><em>完整的生命周期列表，请参考<a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference" target="_blank" rel="noopener">Maven生命周期参考</a></em></p><h3 id="某些阶段通常不会在命令行调用"><a href="#某些阶段通常不会在命令行调用" class="headerlink" title="某些阶段通常不会在命令行调用"></a>某些阶段通常不会在命令行调用</h3><p>以连字符（pre-<em>，post-</em>，process-*）命名的阶段通常不会在命令行直接调用。这些阶段对构建进行排序，产生在构建之外无用的中间结果。比如在执行<code>integration-test</code>时，环境可能处于挂机状态。</p><h2 id="设置项目"><a href="#设置项目" class="headerlink" title="设置项目"></a>设置项目</h2><p>在项目构建Maven构建时，如何给每个构建阶段分配任务？</p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>常用的方法时在POM元素<code>packaging</code>为项目设置打包。如<code>jar</code>，<code>war</code>，<code>ear</code>和<code>pom</code>，如果未设置，则默认为<code>jar</code>。</p><p>每个打包方式都包含一个绑定到特定阶段的目标列表。比如，<code>jar</code>打包的默认构建生命周期的阶段的绑定列表如下。</p><table><thead><tr><th>Phase</th><th>plugin:goal</th></tr></thead><tbody><tr><td>process-resources</td><td>resources:resources</td></tr><tr><td>compile</td><td>compiler:compile</td></tr><tr><td>process-test-resources</td><td>resources:testResources</td></tr><tr><td>test-compile</td><td>compiler:testCompile</td></tr><tr><td>test</td><td>surefire:test</td></tr><tr><td>package</td><td>jar:jar</td></tr><tr><td>install</td><td>install:install</td></tr><tr><td>deploy</td><td>deploy:deploy</td></tr></tbody></table><p><em>参考<a href="https://maven.apache.org/ref/3.6.0/maven-core/default-bindings.html" target="_blank" rel="noopener">标准绑定集</a></em></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>可以通过添加插件的方式向项目中添加目标。插件也就是Maven提供目标的工具，每个插件的功能不同，具体可从<a href="https://maven.apache.org/plugins/index.html" target="_blank" rel="noopener">官网</a>查看。</p><p>比如，如果想生成Java源码，则可以使用Modello插件，将<code>modello:java</code>绑定到<code>generate-sources</code>阶段。则可以在POM文件中<code>&lt;build&gt;</code>的<code>&lt;plugins&gt;</code>部分插入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> &lt;plugin&gt;</span><br><span class="line">   &lt;groupId&gt;org.codehaus.modello&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;modello-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.8.1&lt;/version&gt;</span><br><span class="line">   &lt;executions&gt;</span><br><span class="line">     &lt;execution&gt;</span><br><span class="line">       &lt;configuration&gt;</span><br><span class="line">         &lt;models&gt;</span><br><span class="line">           &lt;model&gt;src/main/mdo/maven.mdo&lt;/model&gt;</span><br><span class="line">         &lt;/models&gt;</span><br><span class="line">         &lt;version&gt;4.0.0&lt;/version&gt;</span><br><span class="line">       &lt;/configuration&gt;</span><br><span class="line">       &lt;goals&gt;</span><br><span class="line">         &lt;goal&gt;java&lt;/goal&gt;</span><br><span class="line">       &lt;/goals&gt;</span><br><span class="line">     &lt;/execution&gt;</span><br><span class="line">   &lt;/executions&gt;</span><br><span class="line"> &lt;/plugin&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maven的功能之一是完成项目构建，而一个完整的项目构建过程包括：清理、编译、测试、打包、集成测试、验证、部署。所以Maven的生命周期中，概括了一个完整的项目构建过程。&lt;/p&gt;
&lt;h2 id=&quot;Maven生命周期&quot;&gt;&lt;a href=&quot;#Maven生命周期&quot; class=&quot;
      
    
    </summary>
    
      <category term="Maven" scheme="https://bigbilii.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://bigbilii.github.io/tags/Maven/"/>
    
      <category term="生命周期" scheme="https://bigbilii.github.io/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>Maven中的坐标、仓库</title>
    <link href="https://bigbilii.github.io/2018/12/18/Maven%E4%B8%AD%E7%9A%84%E5%9D%90%E6%A0%87%E3%80%81%E4%BB%93%E5%BA%93/"/>
    <id>https://bigbilii.github.io/2018/12/18/Maven中的坐标、仓库/</id>
    <published>2018-12-18T11:08:47.000Z</published>
    <updated>2018-12-18T12:05:01.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h2><p>在Maven中，任何一个插件、项目输出都可以被称之为<strong>构建</strong>，所有构建都通过<strong>坐标</strong>作为其<strong>唯一标识</strong>。</p><p>大致由下面五个元素构成：</p><ul><li>groupId：一般为公司或组织的逆向域名。</li><li>artifactId：一般为项目名称+模块名称。</li><li>version：当前该Maven项目的版本。</li><li>packaging：Maven项目的打包方式，默认是jar，也可以打包成war, ear等。</li><li>classifier：定义一些附件，更加细化的后缀，用来定义比如源码、文档、x86版本、ios版本等。</li></ul><p>前三个是必须定义，后两个视情况而定。</p><p>总之，每一个元素坐标，都是为了准确的找到一个构建而设定的。</p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>Maven中的仓库，用来存放构建，分为<strong>本地仓库</strong>和<strong>远程仓库</strong></p><p>如果在所依赖的构建在本地仓库中没有查找到，则会去远程仓库(默认为<a href="https://mvnrepository.com/" target="_blank" rel="noopener">maven远程中央仓库</a>)中下载。</p><h3 id="修改本地仓库"><a href="#修改本地仓库" class="headerlink" title="修改本地仓库"></a>修改本地仓库</h3><p>在安装目录下的<code>conf</code>文件夹中，打开<code>settings.xml</code>文件。找到<code>localRepository</code>，在3.6.0版本中，会有下面一段注解，意思就是本地仓库默认在<code>${user.home}/.m2/repository</code>下，如果需要修改，则添加<code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code>这个标签，里面的值为你设置的本地仓库路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- localRepository</span><br><span class="line">  | The path to the local repository maven will use to store artifacts.</span><br><span class="line">  |</span><br><span class="line">  | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="line"> &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="line"> --&gt;</span><br><span class="line">   &lt;localRepository&gt;你的本地仓库路径&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure><h3 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h3><p>由于maven的中央仓库设置在国外，访问和下载速度很慢，则可以设置一个国内的镜像仓库，这样就能直接从国内的镜像仓库中下载所需要的构建了。</p><p>在安装目录下的<code>conf</code>文件夹中，打开<code>settings.xml</code>文件。找到<code>mirrors</code>，添加相应内容即可。</p><p>镜像仓库就相当于个拦截器，它会拦截maven对远程仓库的请求，将请求的地址重定向到<code>&lt;url&gt;</code>标签所配置的地址，所拦截的范围为<code>&lt;mirrorOf&gt;</code>标签所配置的内容，拦截范围内容为<strong>仓库ID</strong>，可设置多个，用 <code>,</code> 隔开，也可以用 <code>!</code> 设置不用拦截仓库id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;!-- mirror</span><br><span class="line">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="line">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span><br><span class="line">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="line">     |</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;mirrorId&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">     --&gt;</span><br><span class="line">     &lt;!-- 阿里云镜像 --&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;        </span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">  &lt;/mirrors&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;坐标&quot;&gt;&lt;a href=&quot;#坐标&quot; class=&quot;headerlink&quot; title=&quot;坐标&quot;&gt;&lt;/a&gt;坐标&lt;/h2&gt;&lt;p&gt;在Maven中，任何一个插件、项目输出都可以被称之为&lt;strong&gt;构建&lt;/strong&gt;，所有构建都通过&lt;strong&gt;坐标&lt;/stron
      
    
    </summary>
    
      <category term="Maven" scheme="https://bigbilii.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://bigbilii.github.io/tags/Maven/"/>
    
      <category term="仓库" scheme="https://bigbilii.github.io/tags/%E4%BB%93%E5%BA%93/"/>
    
      <category term="镜像" scheme="https://bigbilii.github.io/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="坐标" scheme="https://bigbilii.github.io/tags/%E5%9D%90%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>Maven入门</title>
    <link href="https://bigbilii.github.io/2018/12/16/Maven%E5%85%A5%E9%97%A8/"/>
    <id>https://bigbilii.github.io/2018/12/16/Maven入门/</id>
    <published>2018-12-16T06:44:31.000Z</published>
    <updated>2018-12-16T07:30:35.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>Maven是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>本次将在windows环境下搭建maven环境。</p><p><strong>注意：环境中需要配置JDK</strong></p><h3 id="下载Maven"><a href="#下载Maven" class="headerlink" title="下载Maven"></a>下载Maven</h3><p>访问<a href="http://maven.apache.org/" target="_blank" rel="noopener">Maven官网</a>,下载你所需要的版本，一般情况下，下载已编译的版本，然后解压到相应的安装目录下。</p><p>目录结构介绍：</p><ul><li>bin：包含mvn的运行脚本</li><li>boot：一个类加载器的框架</li><li>conf：配置文件目录</li><li>lib：mvn平时所用的类库</li></ul><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>下载解压安装好之后，需要进行环境变量的配置，以便在任何路径下都能执行mvn的相应运行脚本。</p><p>打开环境变量，编辑系统变量（如果此电脑由多用户使用，则编辑用户变量）</p><p>新建，变量名M2_HOME，变量值为maven的安装目录，确定。</p><p>编辑Path，增加<code>%M2_HOME%\bin;</code>，确定。</p><p>配置成功，打开命令行，输入<code>mvn -v</code>可以查看到maven的版本，Java信息和系统信息。</p><p><em>打开环境变量步骤：电脑邮件-属性-高级系统设置-环境变量。</em><br><em>安装目录下最好不要有中文路径，以避免不必要的问题。</em></p><h2 id="Maven目录结构"><a href="#Maven目录结构" class="headerlink" title="Maven目录结构"></a>Maven目录结构</h2><p>良好的目录结构，有助于开发人员理解项目，也能更好的维护项目。</p><p>一般的Maven项目目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">|--pom.xml //项目对象模型配置文件</span><br><span class="line">|--src</span><br><span class="line">    |--main</span><br><span class="line">        |--java //源代码</span><br><span class="line">            `package</span><br><span class="line">        |--resources //资源文件</span><br><span class="line">    |--test</span><br><span class="line">        |--java //测试代码</span><br><span class="line">            `package</span><br><span class="line">        |--resources //测试资源文件</span><br></pre></td></tr></table></figure><h2 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mvn -v      //查看maven版本</span><br><span class="line">mvm compile //编译</span><br><span class="line">mvn test    //测试</span><br><span class="line">mvn package //打包</span><br><span class="line">mvn clean   //删除target</span><br><span class="line">mvn install //安装jar包到本地仓库</span><br></pre></td></tr></table></figure><p>创建目录的两种方式</p><ul><li>arhetype:gennerate //按照提示进行选择</li><li>arhetype:gennerate <pre><code>-DgroupId=组织名，公司网址反写-DartifactId=项目名-模块名-Dversion=版本号-Dversion=版本号-Dpackage=代码存在的包名</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h2&gt;&lt;p&gt;Maven是基于项目对象模型（POM），可以通过一小段描述信息来管理项目的构建、报告和文档的软件项目管理工具。&lt;/p
      
    
    </summary>
    
      <category term="Maven" scheme="https://bigbilii.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://bigbilii.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题NexT配置</title>
    <link href="https://bigbilii.github.io/2018/12/10/Hexo%E4%B8%BB%E9%A2%98NexT%E9%85%8D%E7%BD%AE/"/>
    <id>https://bigbilii.github.io/2018/12/10/Hexo主题NexT配置/</id>
    <published>2018-12-10T12:37:09.000Z</published>
    <updated>2018-12-10T14:06:45.986Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://bigbilii.github.io/2018/12/05/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/">上篇博客</a>配置了Hexo，今天这篇文章，将介绍Hexo配置NexT主题的配置。</p><h2 id="NexT主题下载与启动"><a href="#NexT主题下载与启动" class="headerlink" title="NexT主题下载与启动"></a>NexT主题下载与启动</h2><p>使用git，克隆最新版本，下载到<code>/themes</code>目录下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd username.github.io</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>下载好之后，打开站点配置文件(/_config.yml),找到<code>theme</code>字段，将值改为next。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>重新启动hexo站点，即可看到主题改变。</p><p><em>注：配置其他主题也是一样的步骤</em></p><p><em>注：如果没有看到主题改变，清理下缓存，使用hexo clean命令，再重试</em></p><h2 id="配置站点配置文件"><a href="#配置站点配置文件" class="headerlink" title="配置站点配置文件"></a>配置站点配置文件</h2><p>站点配置文件在根目录下的<code>_congif.yml</code></p><h3 id="站点信息设置"><a href="#站点信息设置" class="headerlink" title="站点信息设置"></a>站点信息设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: #站点名称</span><br><span class="line">subtitle: #副标题</span><br><span class="line">description: #站点描述</span><br><span class="line">author: #昵称</span><br><span class="line">language: #语言设置</span><br></pre></td></tr></table></figure><p>注意：NexT主题中，language配置有相应的配置信息。</p><blockquote><table><thead><tr><th>语言</th><th style="text-align:right">代码</th><th style="text-align:center">设定示例</th></tr></thead><tbody><tr><td>English</td><td style="text-align:right">en</td><td style="text-align:center">language: en</td></tr><tr><td>简体中文</td><td style="text-align:right">zh-Hans</td><td style="text-align:center">language: zh-Hans</td></tr><tr><td>Français</td><td style="text-align:right">fr-FR</td><td style="text-align:center">language: fr-FR</td></tr><tr><td>Português</td><td style="text-align:right">pt</td><td style="text-align:center">language: pt or language: pt-BR</td></tr><tr><td>繁體中文</td><td style="text-align:right">zh-hk 或者 zh-tw</td><td style="text-align:center">language: zh-hk</td></tr><tr><td>Русский</td><td style="text-align:right">язык    ru</td><td style="text-align:center">language: ru</td></tr><tr><td>Deutsch</td><td style="text-align:right">de</td><td style="text-align:center">language: de</td></tr><tr><td>日本語</td><td style="text-align:right">ja</td><td style="text-align:center">language: ja</td></tr><tr><td>Indonesian</td><td style="text-align:right">id</td><td style="text-align:center">language: id</td></tr><tr><td>Korean</td><td style="text-align:right">ko</td><td style="text-align:center">language: ko</td></tr></tbody></table></blockquote><h2 id="配置主题配置文件"><a href="#配置主题配置文件" class="headerlink" title="配置主题配置文件"></a>配置主题配置文件</h2><p>主题配置文件在主题目录下的<code>/themes/next/_congif.yml</code></p><h3 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h3><p>Scheme是NexT提供的一种特性，借助于Scheme，NexT为你提供多种不同的外观。</p><p>取消想要使用的效果前面的<code>#</code>注释，即可开启，，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Scheme Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line"># scheme: Mist</span><br><span class="line"># scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure></p><h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>通过配置menu标签，来设置网址的菜单选项。</p><p>用法：key: link || icon</p><p>key为菜单项名称，如果在配置的language中翻译项能找到对应翻译，则使用翻译，如果不能找到，则使用key。</p><p>link为菜单的链接。</p><p>icon为FontAwesome图标的名称，如果不配置，则默认使用问题图标。</p><p>menu_icons配置是否使用icon。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Menu Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p><p><em>注：如果站点在子目录下运行，则link的最前面的/删除。</em></p><p><em>注：默认菜单项为上面列出的，只有home和archives不需要手动创建，其他均需要手动创建。</em></p><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>修改<code>avatar</code>字段，值为头像链接，链接可以为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"> http://example.com/avatar.png</span><br></pre></td></tr></table></figure></p><blockquote><table><thead><tr><th>地址</th><th>值</th></tr></thead><tbody><tr><td>完整的互联网 URI</td><td><a href="http://example.com/avatar.png" target="_blank" rel="noopener">http://example.com/avatar.png</a></td></tr><tr><td>站点内的地址</td><td>将头像放置主题目录下的 source/uploads/ （新建 uploads 目录若不存在） 配置为：avatar: /uploads/avatar.png 或者 放置在 source/images/ 目录下 配置为：avatar: /images/avatar.png</td></tr></tbody></table></blockquote><h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><p>这个时间将在站点的底部显示，例如 ©2018。 编辑主题配置文件，新增字段since。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">since: 2018</span><br></pre></td></tr></table></figure><h2 id="Valine评论"><a href="#Valine评论" class="headerlink" title="Valine评论"></a>Valine评论</h2><h3 id="配置leancloud"><a href="#配置leancloud" class="headerlink" title="配置leancloud"></a>配置leancloud</h3><p>Valine需要运行在leancloud上，所以需要<a href="https://leancloud.cn/" target="_blank" rel="noopener">注册</a>其账号，创建一个应用（名字随意），进入应用，设置，应用Key，找到App ID和App Key。</p><h3 id="配置NexT主题配置文件"><a href="#配置NexT主题配置文件" class="headerlink" title="配置NexT主题配置文件"></a>配置NexT主题配置文件</h3><p>打开主题配置文件（/themes/_config.yml），找到Valine标签（没有可自行添加），配置如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid: #上面的appid</span><br><span class="line">  appkey:  #上面的appkey</span><br><span class="line">  notify: false # mail notifier , https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: 欢迎评论 # comment box placeholder</span><br><span class="line">  avatar: mm # gravatar style</span><br><span class="line">  guest_info: nick,mail # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br></pre></td></tr></table></figure></p><h2 id="阅读次数统计（LeanCloud"><a href="#阅读次数统计（LeanCloud" class="headerlink" title="阅读次数统计（LeanCloud)"></a>阅读次数统计（LeanCloud)</h2><h3 id="配置leancloud-1"><a href="#配置leancloud-1" class="headerlink" title="配置leancloud"></a>配置leancloud</h3><p>在配置Valine评论系统的时候，已经拥有了leancloud账号，如果没有，则可以跳转上去查看。</p><p>创建应用(名字随意）点击左侧右上角的齿轮图标，新建Class：<strong>此处的新建Class名字必须为Counter。</strong></p><blockquote><p>由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择无限制。</p></blockquote><p>与valine上述一样，获取该应用的App ID和App Key。</p><h3 id="配置NexT主题配置文件-1"><a href="#配置NexT主题配置文件-1" class="headerlink" title="配置NexT主题配置文件"></a>配置NexT主题配置文件</h3><p>打开主题配置文件（/themes/next/_config.yml），找到leancloud_visitors标签（没有可自行添加），配置如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: #上面的appid</span><br><span class="line">  app_key: #上面的appkey</span><br></pre></td></tr></table></figure></p><h2 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p><h3 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h3><p>在<code>/config.yml</code>中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p><h3 id="配置主题信息"><a href="#配置主题信息" class="headerlink" title="配置主题信息"></a>配置主题信息</h3><p>在<code>/themes/next/config.yml</code>中,启动本地搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://bigbilii.github.io/2018/12/05/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/&quot;&gt;上篇博客&lt;/a&gt;配置了Hexo，今天这篇文章，将介绍Hexo配置NexT主题的配
      
    
    </summary>
    
      <category term="博客" scheme="https://bigbilii.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://bigbilii.github.io/tags/hexo/"/>
    
      <category term="博客" scheme="https://bigbilii.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="NexT" scheme="https://bigbilii.github.io/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github博客搭建</title>
    <link href="https://bigbilii.github.io/2018/12/05/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://bigbilii.github.io/2018/12/05/Hexo-Github博客搭建/</id>
    <published>2018-12-05T08:22:31.000Z</published>
    <updated>2018-12-05T09:07:01.984Z</updated>
    
    <content type="html"><![CDATA[<p>hexo是快速、简洁且高效的博客框架，本文章介绍如何利用hexo+github搭建出一个静态博客网站。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><p>在<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a>下载你相应环境的node.js，根据提示进行安装。</p><p>检验安装完成：</p><p><code>$ node -v</code></p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>在<a href="https://gitforwindows.org/" target="_blank" rel="noopener">官网</a>下载相应环境的git，根据提示安装。</p><p>安装成功后，配置相应的账号和邮箱。（这里需要github账号）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;username&quot;</span><br><span class="line">$ git config --global user.email username@gmail.com</span><br></pre></td></tr></table></figure><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><p>安装node.js之后，根据<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a>的提示，安装hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h2 id="搭建本地博客"><a href="#搭建本地博客" class="headerlink" title="搭建本地博客"></a>搭建本地博客</h2><h3 id="创建博客目录"><a href="#创建博客目录" class="headerlink" title="创建博客目录"></a>创建博客目录</h3><p>上面三个环境搭建好之后，在本地的终端中，进入某个路径，在该路径下建立博客目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init username.github.io</span><br><span class="line">$ cd username.github.io</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="生成静态页面并运行"><a href="#生成静态页面并运行" class="headerlink" title="生成静态页面并运行"></a>生成静态页面并运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><blockquote><p>g 即generate<br>s 即server</p></blockquote><p>在浏览器中，输入地址 <strong>localhost:4000</strong> 即可看到效果。</p><p>这样一个本地的hexo博客系统以及搭建好了。</p><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><h3 id="创建一个username-github-io的public仓库"><a href="#创建一个username-github-io的public仓库" class="headerlink" title="创建一个username.github.io的public仓库"></a>创建一个username.github.io的public仓库</h3><p>创建一个仓库，根据你的github的username来创建一个public的仓库，仓库名为<strong>username.github.io</strong></p><h3 id="安装-hexo-deployer-git"><a href="#安装-hexo-deployer-git" class="headerlink" title="安装 hexo-deployer-git"></a>安装 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><p>在本地<strong>站点配置文件的</strong>：<strong>_config.yml </strong>文件中配置deploy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>这样就能在username.github.com中看到你的博客系统了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hexo是快速、简洁且高效的博客框架，本文章介绍如何利用hexo+github搭建出一个静态博客网站。&lt;/p&gt;
&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;h3 id
      
    
    </summary>
    
      <category term="博客" scheme="https://bigbilii.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://bigbilii.github.io/tags/hexo/"/>
    
      <category term="Github" scheme="https://bigbilii.github.io/tags/Github/"/>
    
      <category term="博客" scheme="https://bigbilii.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>起于年末的片头</title>
    <link href="https://bigbilii.github.io/2018/12/04/%E8%B5%B7%E4%BA%8E%E5%B9%B4%E6%9C%AB%E7%9A%84%E7%89%87%E5%A4%B4/"/>
    <id>https://bigbilii.github.io/2018/12/04/起于年末的片头/</id>
    <published>2018-12-04T14:40:01.000Z</published>
    <updated>2018-12-04T14:40:37.560Z</updated>
    
    <content type="html"><![CDATA[<p>今日，2018年12月4日，是2018年的结束，是我的开始。</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>我，今年23岁，现目前就读于重庆理工大学，计算机科学与技术专业，大四上半学期。在今年暑假加入某gis公司实习，秋招的时候，顺利收到猪八戒网的Java开发offer。</p><p>在过去的很多年内，有很多想法，做过动漫视频剪辑，做过博客，跑步，摄影，看书。但几乎都是做了头两次，但没有坚持，原因就是，当把这些所谓的兴趣和想法，以质量的形式来衡量，就失去了做下去的动力。也就是说，当我想把某件事做好，那么需要很多精力和时间去做这件事，这件事就不再使我快乐，成为了我的负担，也就作罢。</p><p>当现目前我有了足够多的时间，距离明年工作报道还有半年多的时间，这使我重拾了以前的兴趣之一，博客。</p><h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>现目前的我，是一名计算机专业的学生，和其他程序员一样，热爱着技术和科技。</p><p>目前是一名Java开发者，手头也有一些Java相关的技术书籍，掌握了Java基础，Web开发和Spring等相关框架的使用，在实习的时候也学习了Mongodb、Elasticsearch等的使用，在学校也学习了前端，C语言，算法，Andorid，计算机系统，单片机，计算机网络等课程，取得了软件设计师（软考中级），OCJP认证。</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>时间，是我现在所富裕的。所以我得好好计划下接下来的时间安排。</p><p>在接下来的时间，我有几个计划</p><ol><li>坚持学习技术，记笔记，更新博客</li><li>每周跑步两次，锻炼身体，保护头发</li><li>坚持看书（非技术类），增长知识，方便吹b</li><li>在明年年后，租到适合的房子</li></ol><p>不过，现目前还在大学，还有最后的毕业设计要做，等待开题中，等完成了就彻底轻松了，可以出去旅游旅游。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日，2018年12月4日，是2018年的结束，是我的开始。&lt;/p&gt;
&lt;h2 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h2&gt;&lt;p&gt;我，今年23岁，现目前就读于重庆理工大学，计算机科学与技术专业，
      
    
    </summary>
    
      <category term="随笔" scheme="https://bigbilii.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="生活" scheme="https://bigbilii.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="随笔" scheme="https://bigbilii.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
